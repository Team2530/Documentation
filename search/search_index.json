{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Team 2530's Documentation website","text":"<p>This documentation is a living document.</p> <p>This means that no page is ever finished. Feel free to update any documentation page if you feel there is something that needs to be added to it.</p> <p>The Documentation is divided into three types of pages: Wiki Pages, Guides, and Indices. </p>"},{"location":"#wiki-pages","title":"Wiki Pages","text":"<p>Wiki Pages are like encyclopedia or wikipedia articles about a specific topic. They don't include instructional information, but merely explain what something is.</p>"},{"location":"#guides","title":"Guides","text":"<p>Guides are instructional, step-by-step guides on how to achieve a given result. They might also have a link to a youtube video made by our team on the topic.</p>"},{"location":"#indices","title":"Indices","text":"<p>Indices (or Index Pages) are giant lists of pages (Wiki Pages, Guides, and perhaps even other Indices) that are related to a specific topic or training program.</p>"},{"location":"#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"todo/","title":"Documentation TODO List","text":"<ul> <li>Add remaining onshape features</li> <li>Create an updated guide for updating documentation</li> <li>Create some kind of \"kitchen sink\" page that has examples of all the different formatting options, with source code included.</li> </ul>"},{"location":"todo/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/improve-onshape-performance/","title":"Improving Onshape Performance","text":"<p>See https://frcdesign.org/learning-course/stage0/0B/performance-tuning/.</p>"},{"location":"guides/improve-onshape-performance/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/opencv-apriltag-detection-py/","title":"Detecting apriltags with OpenCV and Python","text":"<p>This guide will show you how to use Python and OpenCV to detect Apriltags.</p>"},{"location":"guides/opencv-apriltag-detection-py/#image-sources","title":"Image sources","text":"<p>You can detect apriltags in any type of image, or use a camera. For this guide I'll use an image from the University of Michigan that includes several apriltags of the 36H11 family.</p> <p></p>"},{"location":"guides/opencv-apriltag-detection-py/#instructions","title":"Instructions","text":"<ol> <li> <p>Setup environment &amp; install OpenCV</p> <p>This step will be different depending on what operating system you are on, but all systems generally follow this pattern:</p> <ol> <li>Ensure Python is installed</li> <li>Install a text editor or IDE</li> <li>Install opencv and the apriltag library</li> </ol> LinuxWindowsMac OSChromebook <p>Linux is the easiest operating system to use for this guide, so if you already have it installed that is perfect.</p> <p>Python should be installed by default on most Linux distributions. You can ensure it is installed by typing <code>python3</code> into your terminal. If it fails and you are using debian/ubuntu-based distros, you can use this command to install Python: <code>sudo apt install python3</code>. If you are using some other distribution of Linux then you should see if there is a <code>python</code> or <code>python3</code> package available to be installed.</p> <p>If you don't know how to use vim, VSCodium is a good second choice for an editor. You can install it via snap with this command: <code>snap install codium --classic</code>, or by manually installing the <code>.deb</code> (or <code>.rpm</code>, <code>.AppImage</code>, etc.) from the GitHub releases page.</p> <p>The apriltag project requires cmake to be installed. You can install it by running <code>sudo apt install cmake</code> on Ubuntu/Debian-based distributions.</p> <p>The last thing you will need is to install OpenCV and the apriltag library. You can do this by running <code>pip3 install opencv-python apriltag</code> in your terminal.</p> <p>Download python from https://www.python.org/downloads/windows/, and then install it. </p> <p>If you are on a team laptop, VSCode should be installed already and you shouldn't need to install an IDE. If this is not the case, then you should install WPILib to get the full suite of FRC software (including WPILib VSCode). </p> <p>To install the cv2 and apriltag packages on Windows, you can refer to this guide which explains how to explain python packages. The package names are <code>opencv-python</code> and <code>apriltag</code>.</p> <p>You can download Python from here: https://www.python.org/downloads/macos/.</p> <p>For an IDE, VSCode is an option. Otherwise, you can download the latest <code>.dmg</code> release of VSCodium: https://github.com/VSCodium/vscodium/releases.</p> <p>To install the packages on Mac, just run <code>pip3 install opencv-python apriltag</code>.</p> <p>You will likely have a hard time trying to follow along this guide using a chromebook, especially if it is a school-issued one. The development environment is very slow and takes a long time to run your code. If possible, switch to a different device.</p> <p>A Jupyter Lite Notebook might work in the future. Try creating a new notebook with Pyodide and then running this script to install everything you need:</p> JupyterLite Setup Script<pre><code>import micropip\n\nawait micropip.install(\"opencv-python\")\nawait micropip.install(\"apriltag\") # This does not work\n</code></pre> <p>As of the writing of this guide, the apriltag package cannot be installed within Pyodide.</p> </li> <li> <p>Setup project structure</p> <p>After installing everything that is required, create a new folder. I suggest somewhere in the <code>Documents</code> folder, but it is up to you. Create a file in your new project folder called <code>main.py</code>. This is where all of our Python code will go.</p> <p>If you are going to use the image from the University of Michigan, you should also download it to the same folder and call it <code>image.jpg</code>.</p> </li> <li> <p>Setup the IDE</p> <p>Open the new <code>main.py</code> file in your text editor or IDE. Put this text in there:</p> main.py<pre><code>print(\"hello world\")\n</code></pre> <p>Now, try to run it.</p> VSCode / VSCodiumVim <p>On VSCode or VSCodium you can open a terminal window by pressing Ctrl+J. Then, type <code>python3 main.py</code> to run your program.</p> <p>In Vim, you can type <code>&lt;CMD&gt;terminal&lt;CR&gt;</code> (this is the same as :+T+E+R+M+I+N+A+L+Enter) to open a terminal window. </p> <p>It will probably not go where you want it to, so you can type <code>&lt;C-w&gt;r</code> to flip the windows. (This means Ctrl+W, then R)</p> <p>When you run the program, it should print out \"hello world\" to the console.</p> <p>Don't retype everything every time</p> <p>If you are using the terminal to run your script, you can use the up arrow ( Up ) to skip all the typing after you've run your program once.</p> </li> <li> <p>Add imports</p> <p>You have already installed OpenCV and the <code>apriltag</code> package, but now we need to use them. Delete everything in your <code>main.py</code> file and replace it with this:</p> main.py<pre><code>import cv2\nimport apriltag\n</code></pre> <p>This tells Python that we want to use everything in the <code>cv2</code> (OpenCV) and <code>apriltag</code> packages.</p> </li> <li> <p>Get a video or photo input</p> <p>In order to detect apriltags, you will need some kind of photo or video to detect them in.</p> ImageWebcam main.py<pre><code>import cv2\nimport apriltag\n\n# Read image file\nimage = cv2.imread(\"image.jpg\")\n</code></pre> <p>Instead, if you want to detect apriltags from the webcam, you can do this:</p> main.py<pre><code>import cv2\nimport apriltag\n\n# Setup a video capture object\ncam = cv2.VideoCapture(0)\n\n# Read a single image from it\n_, image = cam.read()\n</code></pre> </li> <li> <p>Display the image</p> <p>You might notice that running your script doesn't appear to do anything yet. This is because we haven't done anything with the image. Let's display it in a new window using OpenCV:</p> main.py<pre><code># ...\n\n# Display the image\ncv2.imshow(\"image\", image) # (1)!\ncv2.waitKey() # (2)!\n</code></pre> <ol> <li>This creates a new window with a name of the first argument (\"image\") that displays the second argument (an image)</li> <li>This waits until the user presses a key. Without this line the image would only be drawn for a few milliseconds on your screen.</li> </ol> <p>If you run the script now, you should see a window with the image.</p> <p></p> </li> <li> <p>Convert the image to grayscale</p> <p>There are at least three channels in the image you just displayed. One for the red contents of the image, one for the blue and one for the green. However, for detecting the apriltag it is much easier to only have a single channel. It is easier for the <code>apriltag</code> package to detect the apriltags if there is no color, so we will convert the image to a grayscale one using OpenCV.</p> main.py<pre><code># ...\n\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Display the image\ncv2.imshow(\"image\", gray)\ncv2.waitKey()\n</code></pre> <p>Tip</p> <p>Don't forget to also change the image being displayed by <code>cv2.imshow</code>, otherwise you will still see the image with color</p> <p></p> </li> <li> <p>Detect apriltags</p> <p>The next step is to make use of the <code>apriltag</code> package and detect the apriltags.</p> <p>We first need an <code>apriltag.Detector</code> object to detect the apriltags. It has a few options that you can configure, but for now we will just set the family to 36h11 as that is what my image contains.</p> main.py<pre><code># ...\n\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\ndetector = apriltag.Detector(\n    apriltag.DetectorOptions(families=\"tag36h11\")\n)\n\n# Display the image\ncv2.imshow(\"image\", gray)\ncv2.waitKey()\n</code></pre> <p>After creating the <code>detector</code>, we need to tell it to detect apriltags in our image. Here is how to do that:</p> main.py<pre><code># ...\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\ndetector = apriltag.Detector(\n    apriltag.DetectorOptions(families=\"tag36h11\")\n)\n\nresults = detector.detect(gray)\nprint(results)\n\n# ...\n</code></pre> <p>Now if you run the script, you should see something like this appear in the console:</p> <pre><code>[Detection(tag_family=b'tag36h11', tag_id=3, hamming=0, goodness=0.0, decision_margin=83.49791717529297, homography=array([[-1.46298201e+00, -2.33748738e+00,  4.19032887e+01],\n   [ 2.74977265e-01, -5.13138146e-01,  1.24367093e+01],\n   [-2.47093499e-03, -2.80314209e-03,  7.19309551e-02]]), center=array([582.54875941, 172.89787484]), corners=array([[591.97900391, 164.17155457],\n   [591.97235107, 183.00921631],\n   [571.6262207 , 183.00509644],\n   [573.03771973, 162.69270325]])), ...]\n</code></pre> <p>This isn't very human-readable, but it does give you a lot of information about the apriltags in the image. You can see that it is an array (contained in square brackets) of <code>Detection</code>s, which each have a <code>tag_family</code>, <code>tag_id</code>, <code>hamming</code>, <code>goodness</code> and <code>decision_margin</code> fields. All of these fields are useful. <code>tag_id</code> is the ID of the apriltag, and <code>corners</code> contains an array of points that mark the corners of the apriltag.</p> </li> <li> <p>Draw some boxes</p> <p>Technically, you are now finished. You have detected apriltags in an image using OpenCV. But this kind of result isn't very presentable and also seems pretty boring. Lets draw some boxes around the apriltags to make it look nicer.</p> main.py<pre><code># ...\n\nfor result in results:\n    (corner_a, corner_b, corner_c, corner_d) = result.corners\n\n    corner_a = (int(corner_a[0]), int(corner_a[1]))\n    corner_b = (int(corner_b[0]), int(corner_b[1]))\n    corner_c = (int(corner_c[0]), int(corner_c[1]))\n    corner_d = (int(corner_d[0]), int(corner_d[1]))\n\n    line_color = (0, 255, 0) # green\n    line_thickness = 2\n\n    # Draw a rectangle using the corners\n    cv2.line(image, corner_a, corner_b, line_color, line_thickness)\n    cv2.line(image, corner_b, corner_c, line_color, line_thickness)\n    cv2.line(image, corner_c, corner_d, line_color, line_thickness)\n    cv2.line(image, corner_d, corner_a, line_color, line_thickness)\n\ncv2.imshow(\"image\", image)\ncv2.waitKey()\n</code></pre> <p>This uses the <code>corners</code> field found in the last step to draw some boxes around the apriltags. Notice that the lines are drawn on the original image (<code>image</code>), instead of the grayscale version (<code>gray</code>). This allows us to keep the color of the original image alongside the fancy boxes. Remember to change the <code>cv2.imshow</code> parameter back to <code>image</code> though, otherwise you won't get to see the boxes.</p> <p></p> </li> <li> <p>Try other things</p> <p>Now that you can detect the apriltags, you can do many other things with that information. Here is a list of things you can try, but don't be afraid to do something else entirely:</p> <ul> <li>Instead of using a single frame from the webcam, try to make it detect apriltags in real time.</li> <li>Do Pose Estimation to figure out where the camera is relative to the apriltag</li> <li>Draw more annotations on the original image, such as the tag ID or a circle instead of a box.</li> <li>The example image used in this guide has apriltags that look easy to detect but are still missed. Figure out why they aren't being detected and then update the program so that it catches them too.</li> </ul> </li> </ol>"},{"location":"guides/opencv-apriltag-detection-py/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/ordering-tshirts/","title":"How to order team tshirts","text":"<p>This was taken and modified from this discord message on 01/10/2024.</p> <ol> <li>Make contact with Superior to discuss lead time for shirts.</li> <li>Decide overall design/graphic layout for each item (i.e. where the logos and printed elements are such as front/back/sleeve), including how many printed colors are in the design. All these things affect the cost. (The more colors and the more locations, the greater the cost). Please see the \"2023 Merchandise Details\" document in the post above for what I mean)  WHO:  In past years this was 1 BzNz student, myself and Steve. This year I am not sure which individuals identify as taking part in this. Please feel free to identify yourselves. I recommend we meet soon this week at one of our meetings to discuss.</li> <li>Update any graphics in the design elements (i.e. sponsor layout, changes to the logo or wording, for instance we added the word \"Robotics\" under our Inconceivable logo last year.) WHO- graphics team.</li> <li>Decide which apparel style &amp; brand we are using (e.g. Gildan 50/50 poly Short Sleeve tee, Sport tek Unisex zip up etc etc). WHO- This step has already been done by me for this year.</li> <li>Email mock up designs / design descriptions to Superior Screening so they can give us a price quotefor each item type (hoodie, sport zip, tshirt SS, tshirt LS). WHO- I will do this once I have any info from step #1</li> <li>Solicit orders from team members via google survey (I suggest ideally this be done by Jan 16 or 17)   WHO- BzNZ team member</li> <li>Collate orders and email order to Superior by Jan 26 at latest - WHO- BzNz team member and myself</li> <li>Immediately with the order, Send any NEW graphic files to Superior. Any that are unchanged they likely have on file.  WHO- graphics team member can email directly or email via me.</li> <li>Add up the cost of each person's order and collect money from them.</li> <li>Pick up shirts at Superior and distribute to the team by March 1</li> </ol>"},{"location":"guides/ordering-tshirts/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/programming-laptop-setup/","title":"How to setup a programming laptop","text":"<p>Prerequisite: Windows 10/11</p> <p>This guide assumes that you have Windows 10 or Windows 11 installed on the laptop. It is possible to install some of the tools on Linux and Mac, but NI Game Tools supports Windows exclusively, and it is required to be able to control the robot from a laptop.</p>"},{"location":"guides/programming-laptop-setup/#list-of-software-to-install","title":"List of Software to install","text":"Program Name Annual Updates needed Description Download Link Google Chrome No Microsoft Edge is not suitable for programming. Any other browser, like Google Chrome, Firefox or Opera GX will work. https://www.google.com/chrome/ WPILib Yes WPILib is a suite of tools for FRC. Includes VSCode and some other gems. https://github.com/wpilibsuite/allwpilib/releases VSCode Extension Pack for Java No This extension by Red Hat has all of the vscode extensions you will need to write code in Java. Use the extensions tab in VSCode. You can find it by clicking on the icon with four boxes on the left side of the screen or by pressing Ctrl+Shift+X. NI Game Tools Yes This allows you to connect to the robot. Includes Driver's Station and RoboRIO imaging tool. To download the installer file you need to create a free account. Typically one person on the team will do this and then distribute the files to everyone else. https://www.ni.com/en/support/downloads/drivers/download.frc-game-tools.html Git for Windows No This program contains Git Bash, a tool for interacting with git repositories on the command line. https://github.com/git-for-windows/git/releases/tag/v2.49.0.windows.1 PathPlanner Yes PathPlanner is a tool for designing autonomous routes. You should install this from the windows store to get automatic updates. https://apps.microsoft.com/detail/9nqbkb5dw909?ocid=webpdpshare Phoenix Tuner Yes Phonenix tuner allows for debugging and configuration of CTRE devices. https://apps.microsoft.com/detail/9nvv4pwdw27z?ocid=webpdpshare REV Hardware Client Yes Allows for managament of REV devices like the PDH. https://docs.revrobotics.com/rev-hardware-client Cloudflare WARP Maybe? This is a VPN that allows you to bypass the internet restrictions at Kellogg. This is needed because they block important websites/protocols that our team uses like Discord and SSH. https://docs.revrobotics.com/rev-hardware-client"},{"location":"guides/programming-laptop-setup/#list-of-software-not-to-install","title":"List of software not to install","text":"<ul> <li>Discord - use the web version available at https://discord.com/app instead.</li> <li>Games or other applications that aren't robotics-related</li> </ul>"},{"location":"guides/programming-laptop-setup/#automated-python-script","title":"Automated Python script","text":"<p>This script has been used in the past to automate the process of onboarding new team laptops. It removes old software, installs new software, collect system information and then sets the desktop wallpaper to a random image out of a folder.</p> laptop-setup.py<pre><code>################################################\n#####  TEAM 2530 LAPTOP ONBOARDING SCRIPT  #####\n################################################\n\nimport platform, json, zipfile, sys, socket, re, psutil, uuid, shutil, subprocess, os, random, ctypes\n\n# 0: Get admin perms\n\ndef run_as_admin(argv=None, debug=False):\n    shell32 = ctypes.windll.shell32\n    if argv is None and shell32.IsUserAnAdmin():\n        return True\n\n    if argv is None:\n        argv = sys.argv\n    if hasattr(sys, '_MEIPASS'):\n        # Support pyinstaller wrapped program.\n        arguments = map(str, argv[1:])\n    else:\n        arguments = map(str, argv)\n    argument_line = u' '.join(arguments)\n    executable = str(sys.executable)\n    if debug:\n        print('Command line: ', executable, argument_line)\n    ret = shell32.ShellExecuteW(None, u\"runas\", executable, argument_line, None, 1)\n    if int(ret) &lt;= 32:\n        return False\n    return None\n\n\nret = run_as_admin()\nif ret is True:\n    print(\"Access granted\")\nelif ret is None:\n    exit(0)\nelse:\n    print ('Error(ret=%d): cannot elevate privilege.' % (ret, ))\n    exit(0)\n\n\n#####################################\n### 1: Collect system information ###\n#####################################\n\nprint(\"[01] - Collect system information\")\n\ndef get_system_info():\n    info = {}\n    info[\"platform\"] = platform.system()\n    info[\"release\"] = platform.release()\n    info[\"version\"] = platform.version()\n    info[\"arch\"] = platform.machine()\n    info[\"hostname\"] = socket.gethostname()\n    info[\"mac\"] = \":\".join(re.findall(\"..\", \"%012x\" % uuid.getnode()))\n    info[\"processor\"] = platform.processor()\n    info[\"ram\"] = str(round(psutil.virtual_memory().total / (1024.0 ** 3))) + \"GB\"\n\n    disk_usage = psutil.disk_usage(\"C:\\\\\")\n    info[\"disk_used\"] = disk_usage.used\n    info[\"disk_total\"] = disk_usage.total\n\n    return info\n\nsystem_info = get_system_info()\nwith open(f\"laptop_info\\\\{system_info['disk_used']}.json\", \"w\") as fp:\n    fp.write(json.dumps(system_info))\n\n#####################################\n### 2: Delete old tools           ###\n#####################################\n\nprint(\"[02] - Delete old tools\")\n\ntry:\n    shutil.rmtree(\"C:\\\\Users\\\\Public\\\\wpilib\")\nexcept FileNotFoundError:\n    pass\n\n#####################################\n### 3: Install new tools          ###\n#####################################\n\nprint(\"[03] - Install new tools\")\n\n# WPILib\nsubprocess.Popen(\".\\\\wpilib_installer\\\\WPILibInstaller.exe\", cwd=\".\\\\wpilib_installer\")\n\n# REV Hardware client\nsubprocess.Popen(\".\\\\REV-Hardware-Client-Setup-1.6.6.exe\")\n\n# Git for windows\nsubprocess.Popen(\".\\\\Git-2.47.1-64-bit.exe\")\n\n# Marktext\nsubprocess.Popen(\".\\\\marktext-setup.exe\")\n\n\n#####################################\n### 4: Configuration              ###\n#####################################\n\nprint(\"[04] - System Configuration\")\n\nimage = random.choice(os.listdir(\".\\\\wallpapers\"))\n\nshutil.copy(f\".\\\\wallpapers\\\\{image}\", os.path.expanduser(\"~\\\\Documents\\\\\"))\n\nimage_path = os.path.expanduser(f\"~\\\\Documents\\\\{image}\")\n\nctypes.windll.user32.SystemParametersInfoW(20, 0, image_path, 0)\n</code></pre> <p>If you want to use this script, you will need to do these things:</p> <ol> <li>Find a USB with enough space for all of the installer files and wallpapers</li> <li>Download installers for everything onto the USB</li> <li>Update the paths to all of the installer files and add any new installers that you want.</li> <li>Find or create team desktop wallpapers and put them in a folder on the USB called <code>wallpapers</code>.</li> <li>Plug in the USB to each computer and run the script.</li> </ol>"},{"location":"guides/programming-laptop-setup/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/setting-up-software-for-a-new-season/","title":"Setting up software for a new season","text":"<p>WPILib releases a new major version of their software every season, and it's important to update our software and migrate to the corresponding year's project after kickoff to avoid various issues.</p>"},{"location":"guides/setting-up-software-for-a-new-season/#update-wpilib","title":"Update WPILib","text":"<p>!!! warning This needs to be done on ALL computers (except Chromebooks) to avoid compatibility issues.</p> <p>Follow the instructions on this page to install the latest version of WPILib. Make sure to select the \"Everything\" mode, \"Install for this User,\" and \"Download for this computer only\" (or whatever equivalent/similar options appear in future installers.)</p> <p>The following steps only need to be completed once per season. If the RobotCode20XX repository (with the current year) already exists and has robot code in it, chances are that someone has already done this and you don't need to. All you have to do at this point is clone the new repository to your computer.</p>"},{"location":"guides/setting-up-software-for-a-new-season/#update-the-roborio","title":"Update the RoboRIO","text":"<p>View the instructions here.</p>"},{"location":"guides/setting-up-software-for-a-new-season/#configure-a-new-project","title":"Configure a new project","text":""},{"location":"guides/setting-up-software-for-a-new-season/#step-1-create-and-clone-a-new-repo","title":"Step 1: Create and clone a new repo","text":"<p>Create a new GitHub repository titled <code>RobotCode20XX</code> in our Team 2530 organization. (If you don't have permission, someone else who does will need to do it for you. Or, if you were entrusted with setting everything up, you could probably get someone to give you admin privileges.) Clone this repository onto your computer, preferably somewhere you won't forget.</p> <p>Don't get confused!</p> <p>The <code>XX</code> in <code>RobotCode20XX</code> should be replaced with numbers so that it matches the current year.</p>"},{"location":"guides/setting-up-software-for-a-new-season/#step-2-create-or-import-a-project","title":"Step 2: Create or import a project","text":"<p>This only needs to be done on ONE computer and then published to GitHub.</p> <p>At this point, you need to decide if you want to reuse the previous year's robot code (which is what we usually do) or start an entirely new project. Remember that even if you start an entirely new project, you can still copy as much code as you want from other projects, but it will be more tedious than just importing an old project.</p>"},{"location":"guides/setting-up-software-for-a-new-season/#reusing-the-previous-years-code","title":"Reusing the previous year's code","text":"<ol> <li>If you haven't already, clone the previous year's code onto your computer.</li> <li>Open that folder in VSCode.</li> <li>You should get a prompt to import the old project into the new version of WPILib. (If not, there's an \"Import a WPILib 20XX Gradle project\" command in the Command Palette.) Select <code>OK</code>.</li> <li>Change \"Project Name\" to <code>RobotCode20XX</code>, change \"Base Folder\" to the folder you cloned your repo into, and uncheck \"Create a new folder?\" (yes, it's highly recommended, but we know what we're doing.)</li> <li>Hit that Import Project button! (You'll see a lot of red, and the code won't build -- you'll still need to complete step 3)</li> </ol>"},{"location":"guides/setting-up-software-for-a-new-season/#starting-an-entirely-new-project","title":"Starting an entirely new project","text":"<ol> <li>Open any file in VSCode.</li> <li>Click on the WPILib icon in the upper-right corner.</li> <li>Type \"Create a new project\" and select the option that appears.</li> <li>Select the <code>Template</code> project type, enter <code>RobotCode20XX</code> for the project name, and enter <code>2530</code> for the team number.</li> <li>Click the \"Generate Project\" button!</li> </ol>"},{"location":"guides/setting-up-software-for-a-new-season/#step-3-add-the-libraries-to-the-project","title":"Step 3: Add the libraries to the project","text":"<p>This only needs to be done on ONE computer and then published to GitHub. Note that this is a separate process from installing the libraries to your computer -- this needs to be done every time we create a new WPILib project.</p> <ol> <li>Open any file in VS Code.</li> <li>Click on the WPILib icon in the upper-right corner.</li> <li>Type \"Manage Vendor Libraries\" and select the option that appears.</li> <li>Select \"Install new libraries (offline)\".</li> <li>Select \"CTRE-Phoenix\" and \"KauaiLabs_navX_FRC\", then click OK. (If you don't see one or both of these, make sure that the CTRE Phoenix and navX libraries are installed on your computer.)</li> <li>Once the installation is finished, you'll be prompted to build the robot code -- go ahead and confirm. If you imported a project, the errors might linger for a minute, but as long as the robot code builds successfully, you're good to go.</li> </ol>"},{"location":"guides/setting-up-software-for-a-new-season/#step-4-push-the-changes-to-github","title":"Step 4: Push the changes to GitHub","text":"<p>If you followed the steps in order, you should be able to simply push your changes to your <code>RobotCode20XX</code> repository.</p> <p>After these steps have been completed, for the rest of the season, all you have to do to set up another computer is:</p> <ul> <li>install the latest version of WPILib</li> <li>clone the new repository</li> </ul>"},{"location":"guides/setting-up-software-for-a-new-season/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/signup-for-figma/","title":"Signup for figma","text":""},{"location":"guides/signup-for-figma/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/signup-for-github/","title":"Signup for github","text":""},{"location":"guides/signup-for-github/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"guides/signup-for-onshape/","title":"Onshape Signup Guide","text":"<p>This guide explains how to create an Onshape account.</p>"},{"location":"guides/signup-for-onshape/#instructions","title":"Instructions","text":"<ol> <li>Go to https://www.onshape.com/en/education/sign-up</li> <li> <p>Fill out the form</p> <p></p> </li> <li> <p>Answer all the other questions</p> <p></p> </li> <li> <p>Verify your email</p> <p>You should receive an email shortly after finishing the form that will ask you to activate your account. Click the green button in the email to verify your email.</p> </li> <li> <p>Join the team</p> <p>Find a coach or CAD lead with administrative privileges, and ask them to add you to the team's onshape group. After they do this, you will get another email that says you've been added to the team.</p> </li> <li> <p>Start CADding!</p> <p>You might want to start off by participating in one of our CAD training programs or doing some self-directed learning.</p> </li> </ol>"},{"location":"guides/signup-for-onshape/#sources","title":"Sources","text":"<ul> <li>https://www.onshape.com/en/education/sign-up</li> </ul>"},{"location":"guides/signup-for-onshape/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"indices/electronic-components/","title":"Index of Electrical Components","text":"Component Details Image PDH or PDP For power distribution. We usually use the PDH and not the PDP. Main Breaker The main on/off switch. RoboRIO CPU for the entire robot. Swerve Modules If we are using swerve, there will be four of these. Each has two motors. Motors and motor controllers Robot Radio Blinky Light VRM Battery Cameras and vision components Usually Limelights."},{"location":"indices/electronic-components/#sources","title":"Sources","text":"<ul> <li>2025 Electrical Component Document</li> <li>https://frcdesign.org/learning-course/stage1/1E/electronics/#electronic-components</li> <li>https://docs.wpilib.org/en/stable/docs/controls-overviews/control-system-hardware.html</li> </ul>"},{"location":"indices/electronic-components/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"indices/onboarding/","title":"Onboarding Index","text":"<p>This guide is for student onboarding</p> <p>Mentor onboarding isn't documented here yet.</p> <p>This is a list of things that new students will need access to in order to participate on the team.</p> <ol> <li>Google Drive</li> <li> <p>Team Calendar</p> <p>We use the team calendar for scheduling of meetings and other team events. You can add it to your own Google Calendar or access it from our website.</p> </li> <li> <p>Google Drive</p> <p>The team Google Drive is essential. To get access to it, talk with a Coach.</p> </li> <li> <p>Interest-specific items</p> <p>If you are interested in Programming, CAD, Mechanical, Electronics, Business, Graphics or another subteam, there are other programs and services that you will need access to. Find out who the subteam lead is and then ask them about it.</p> </li> </ol>"},{"location":"indices/onboarding/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"indices/programming-training/","title":"Programming Training Index","text":""},{"location":"indices/programming-training/#links","title":"Links","text":"<ul> <li>2024-25 Java Basics Training Slideshow: https://docs.google.com/presentation/d/1g9eEfSNjTs87GxhoOxHhNG9AUbURVxxUiGHY-1t4dnw/edit?usp=sharing</li> <li>Updated version: https://docs.google.com/presentation/d/1AHjhjMnOQbkNCwbh_5AALVOGTUa7c2x0pCcGFPCqXkQ/edit?usp=sharing</li> <li>WPILib Basic Programming Documentation</li> <li>W3Schools</li> </ul>"},{"location":"indices/programming-training/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"indices/self-directed-learning-resources/","title":"Index of Resources for self-directed learning","text":""},{"location":"indices/self-directed-learning-resources/#other-collections-of-resources","title":"Other Collections of Resources","text":"<ul> <li>NASA Robotics Alliance Project Resource Links</li> </ul>"},{"location":"indices/self-directed-learning-resources/#by-subteam","title":"By Subteam","text":""},{"location":"indices/self-directed-learning-resources/#programming","title":"Programming","text":"<ul> <li>Orbit software sessions 1 &amp; 2</li> <li>WPILib \"Zero to Robot\"</li> <li>WPILib Simulations</li> </ul>"},{"location":"indices/self-directed-learning-resources/#electronics","title":"Electronics","text":"<ul> <li>https://media.screensteps.com/exported/Wpilib/2078/376137/Wiring_the_FRC_Control_System.pdf</li> </ul>"},{"location":"indices/self-directed-learning-resources/#design","title":"Design","text":"<ul> <li>https://www.frcdesign.org/</li> <li>https://www.chiefdelphi.com/ CADathon submission and open alliance build threads</li> <li>OnShape Learning Center</li> </ul>"},{"location":"indices/self-directed-learning-resources/#multiple-subteams-misc","title":"Multiple Subteams / Misc","text":"<ul> <li>NASA RAP Project</li> <li>Citrus Circuits Fall Workshops</li> </ul>"},{"location":"indices/self-directed-learning-resources/#sources","title":"Sources","text":"<ul> <li>Finn's Summer Resources Google Doc</li> </ul>"},{"location":"indices/self-directed-learning-resources/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/","title":"Old documentation","text":"<p>This folder contains all of the old documentation. It is slowly being reintegrated with the current documentation.</p> <p>Please don't use this material for anything, as it is probably outdated.</p>"},{"location":"old_docs/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/01-Learning-Java/","title":"Learning Java","text":"<p>There are a variety of websites that are useful for learning Java.</p> <p>If you've never programmed before in your life or only understand it a little, Codecademy's Java tutorial is a great resource. It explains what programming is and goes through the basics of Java with opportunities for you to practice. Make sure that you know how to write (not just read) code with methods, variables, if-else statements, conditionals, objects, arrays, and loops. It would also be really, really helpful for your understanding if you learned about classes and static variables. (You may need to do some independent web-searching for some of these. Or just ask a lead or mentor!)</p> <p>If you have experience with another programming language or programming in general, W3Schools's Java reference is a quicker way to learn Java. It's also valuable to reference when you forget the syntax for something. Again, make sure you're comfortable with the topics listed above, as some of these work differently in Java.</p> <p>Lastly, the WPILib API Docs are a completely comprehensive resource of packages, classes, methods, and functions relating to robot interaction. If you're just starting out with Java, it's best not to read these unless you know what you're looking for, since the vast amount of material can be overwhelming at first. We'll explain what you need to know to get started in the following articles.</p>"},{"location":"old_docs/programming/basics/01-Learning-Java/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/","title":"Java Tutorial","text":"<p>Hello! Welcome to Team 2530's Java Tutorial! This is a basic overview of Java programming in general, and more in depth tutorials can be found here. Again, this tutorial will cover the basics of Java programming, but it is recommended that you do some exploring and work on your own.</p> <p>Throughout this Tutorial, a bit of code will be referenced which runs Langton's Ant.</p> <p>The code below is the entire program. It is recommended that you put this code into some sort of editor so you can see what is going on. One that requires an account to be made, but has several nice features is Replit.</p> <pre><code>class Main {\n  public static final String ANSI_RED = \"\\u001B[31m\";\n  public static final String ANSI_RESET = \"\\u001B[0m\";\n  public static final String ANSI_BLACK = \"\\u001B[30m\";\n  public static void main(String[] args) {\n    int matrixSize = 75;\n    int direction = 1;\n    int realAntX = matrixSize / 2;\n    int realAntY = matrixSize / 2;\n    int[] antNew = {0 , 0};\n    int matrix[][] = makeMatrix(matrixSize);\n\n    // moves before the ant stops\n    int ticks = 11000;\n\n\n    System.out.println();\n    printMatrix(matrix , matrixSize);\n    matrix[matrixSize / 2][matrixSize / 2] = 1;\n    System.out.println();\n    int iterations = 0;\n\n    while(ticks &gt; iterations){\n      // return new position of ant\n      System.out.println(direction);\n      antNew = moveAnt(realAntX, realAntY, direction);\n      realAntX = antNew[0];\n      realAntY = antNew[1];\n      // determine the direction we want the ant to go\n      direction = direction(direction, matrix, realAntX, realAntY);\n      // set the matrix to the opposite number\n      matrix[realAntX][realAntY] = matrixGet(realAntX, realAntY, matrix);\n      iterations += 1;\n  }\n  System.out.println();\n  printMatrix(matrix , matrixSize);\n}\n\n  public static int[][] makeMatrix(int size){\n    return new int[size][size];\n  }\n  public static void printMatrix(int[][] m, int size){\n    for(int i = 0; i &lt; size  ; i++) {\n      System.out.println();\n      for(int a = 0; a &lt; size ; a++){\n        if(m[i][a] == 1) {\n          System.out.print(ANSI_RED + m[i][a] + ANSI_RESET +  \" \");\n        } else {\n          System.out.print(ANSI_BLACK + m[i][a] + ANSI_RESET + \" \");\n        }\n\n      }\n    }\n  }\n  public static int[] moveAnt(int antx, int anty, int dir){\n    if(dir == 1){\n      anty += 1;\n    } else if (dir == 3){\n      anty -= 1;\n    }\n    if (dir == 2){\n      antx += 1;\n    } else if (dir == 4){\n      antx -= 1;\n    }\n    int[] newAnt = {antx, anty};\n    return newAnt;\n  }\n\n\n  public static int direction(int dir, int[][] m , int antx, int anty){\n    if (m[antx][anty] == 1){\n      dir += 1;\n    } else if (m[antx][anty] == 0){\n      dir -= 1;\n    }\n    if(dir &gt; 4) {\n      dir = 1;\n    } else if(dir &lt; 1) {\n      dir = 4;\n    }\n    return dir;\n  }\n  public static int matrixGet(int antx, int anty, int[][] m){\n    if(m[antx][anty] == 1){\n      return 0;\n    } else if (m[antx][anty] == 0){\n      return 1;\n    }\n    return 200;\n  }\n}\n</code></pre> <p>This may seem like a lot, but don't worry, It will be broken down into little parts that will make sense in the end.</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#java-variables","title":"Java Variables","text":"<p>One thing you may have noticed is that each variable, or name that holds a specific value, has a specific keyword before it. Each of these have there own uses.  <pre><code>{% raw %}\nint apples = 5;\nString bananas = \"yellow\";\nboolean perhaps = true;\ndouble x = 1.5;\nint[][] matrix = {{1,3},{2,7}}\n{% endraw %}\n</code></pre> <code>int</code> is used to define numbers without a decimal, so things like 2530 or 517.</p> <p><code>String</code> defines a collection of characters.</p> <p><code>boolean</code> defines a logic operator of either true or false.</p> <p><code>double</code> defines a number with a decimal point such as 12.34 or 97.5602</p> <p>Note that each uses <code>=</code> as an assignment operator, which defines the value of whatever name you gave your variable.</p> <p>There are also slightly more complex things like int[] or int[][] which represent an array and a matrix respectively. Note that when using arrays or matrices, they don't always have to be numbers, they can also be characters and strings.</p> <p><code>int[]</code> defines an array of numbers. An array is basically a list of numbers which can be used to make things more compact and minimize the number of variables that are used.</p> <p><code>int[][]</code> defines a matrix which can be used to store values, in this case, integers in a specific place in 2D. So, if you have the matrix below and want the 7, you would ask for int[][]'s name (which is matrix in the above example) at the position that you want. Note that in many programming languages, the first number or element is called \"0\". Java Matrices are named row (x wise) then by column (y wise). <pre><code>1  3\n\n2  7\n\nmatrix[1][1] returns 7\n</code></pre></p> <p>Try creating and getting values from your own matrices! Remember that this tutorial is here to help guide you, and a lot can be learned from writing and refining simple code.</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#java-syntax-and-printing","title":"Java Syntax and Printing","text":"<p>You also may notice the use of <code>System.out.println();</code> and the <code>;</code></p> <p>Java uses the semicolon to distinguish between lines, so don't forget to use it on nearly every line (Unless the line ends with <code>{</code>, but don't worry about those yet)</p> <p><code>System.out.println()</code> allows the programmer to get feedback about what the program is doing and can be useful for debugging programs and verify that everything is running smoothly.</p> <p>There are various ways to use <code>System.out.println()</code> and the main ones you should know are printing strings and numbers. The third example will print the String, a space, and the number at the end.</p> <p>You will also notice the use of <code>//</code>. This is the Java version of comments which can be used to write notes in your code. Anything written on the same line as these will be ignored by the program when executing. It is very helpful to comment out your code so others get a general \"map\" of what is happening, especially if it is hard to understand.</p> <pre><code>System.out.println(\"This will print a string\"); // prints the string\nSystem.out.println(number); // prints the value of number\nSystem.out.println(\"Your Number is:\" + \" \" + number); prints a string, a space, and the value of number\n</code></pre>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#java-statements-and-loops","title":"Java Statements and Loops","text":"<p>Many things in Java use If and For statements, and they make your code run much smoother.</p> <p>Note that all of the Statements and Loops don't use a <code>;</code> at the end of the line, but rather a <code>{</code>. Anything contained within the boundaries of the end bracket will be run in the loop.</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#if-statements","title":"If Statements","text":"<p>The Java If statement will run the code inside of it if and only if certain conditions are met. If you want to do something like move the robot only if it has turned first, you would do something like</p> <pre><code>if(robot.hasTurned == true){\n robot.moveForward;\n} else {\n robot.stop;\n}\n</code></pre> <p>Real code won't look exactly as it does above, but you can start to see what is happening.</p> <p>Note that the <code>if</code> statement uses <code>==</code> as a comparing operation. Because one <code>=</code> is the assignment operator, the <code>==</code> is used to compare two sides of the statement. The code above is saying that if and only if the robot has turned, it should move forward. If for whatever reason it hasn't accomplished that task, the else statement provides the alternative, the robot has to stop. You may also use <code>else if</code> statement to provide another statement if the first one isn't met.</p> <pre><code>if(robot.hasTurned == true){\n robot.moveForward;\n} else if(robot.isTurning) {\n robot.keepTurning;\n} else {\n robot.stop;\n}\n</code></pre> <p>This code is fundamentally the same as before, just with one added twist, if the robot is currently turning, it should keep turning. The <code>else if</code> statement provides another option if the first one isn't met instead of the first <code>if</code> being the one to handle everything.</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#for-loops","title":"For Loops","text":"<p>For loops are for repeated tasks in a simple sense. A <code>for</code> loop will got through a block of code exactly how many times you specify it to, so in our case, it is used to print out all of the values in our matrix.</p> <pre><code>for(int i = 0; i &lt; 5; i++){\n int a += 1;\n}\n</code></pre> <p>Assuming that our variable a starts at 0, the end result of \"a\" will be 5. The first argument is your starting variable; it can be whatever name you would like. It needs to have a value, but it can be something that is defined earlier in the code. The second argument it how long it should run for. Read this as \"while i is less than 5\" to make it easier to understand. The last argument is what should be done with your variable that you passed in at the start. You can increase it by using <code>++</code> or decrease by using <code>--</code>.</p> <p>Also note the use of <code>+=</code>. This will increment whatever value you put into the statement by whatever follows it. It is just shorthand and means the same thing as <code>a = a + 1;</code>. You can also do <code>-=</code> for the same thing except decreasing.</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#while-loops","title":"While Loops","text":"<p>While Loops are very useful as they run a given block of code until a certain condition is met.</p> <p>Note that the syntax looks similar to that of the <code>if</code> statement.</p> <pre><code>int a = 0;\nwhile(a &lt; 5){\nSystem.out.println(\"a is:\" + \" \" + a);\na+= 1;\n}\n</code></pre> <p>If you run this code, notice that it only prints up to <code>a is: 4</code>. This is because now that \"a\" is actually five, it isn't less than 5 and the loop ends. If you wanted to get to 5, you would need to change the <code>&lt;</code> operator to a <code>&lt;=</code> operator.</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#java-methods","title":"Java Methods","text":"<p>Methods are a great way to write reusable code. Methods have specific deceleration, so pay close attention to how they are made. </p> <p>Lets say you want a method to make the robot go forward</p> <pre><code>public static void driveForward(){\n if(robot.isMoving){\n  robot.stop;\n }\n robot.goForward;\n}\n</code></pre> <p>The start of the method is defined as <code>public</code>. This means just what you probably think it does; it can be accessed from anywhere in the file and in others.</p> <p><code>void</code> means that the method isn't expected to return any number, string, boolean, array, etc. If you wanted to return one of the previously mentioned items, you simply need to replace void with one of the types such as <code>int</code> or <code>boolean</code>.</p> <p>Everything inside of the method <code>driveForward()</code> will be run each time it is called. You can put <code>if</code>, <code>for</code>, and <code>while</code> loops inside of methods.</p> <p>You may also need to pass in parameters to a method which is done simply by putting the type you are passing and a name to be referenced as inside the method.</p> <pre><code>public int multiply(int a, int b){\n System.out.println(a * b);\n return a * b;\n}\n</code></pre> <p>If you call <code>multiply(5, 10)</code>, the method would spit out 50 as its result. Use <code>return</code> whenever you have what you need to return, but after a value is returned, none of the following code in the method will be run.</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#explaining-langtons-ant","title":"Explaining Langton's Ant","text":"<p>You know now much of everything you need to know about programming in Java. Don't worry if some things still don't make sense; it takes a while and some playing around with code until things will really start to make sense. Once again, if you are stuck or there is something you need to know more about, you can search it up or look at the W3 Schools Tutorial.</p> <pre><code>class Main {\n  public static final String ANSI_RED = \"\\u001B[31m\";\n  public static final String ANSI_RESET = \"\\u001B[0m\";\n  public static final String ANSI_BLACK = \"\\u001B[30m\";\n  public static void main(String[] args) {\n    int matrixSize = 75;\n    int direction = 1;\n    int realAntX = matrixSize / 2;\n    int realAntY = matrixSize / 2;\n    int[] antNew = {0 , 0};\n    int matrix[][] = makeMatrix(matrixSize);\n</code></pre> <p>The code starts off with the declaration of our class as well as some variables that we will be using throughout the rest of the program. The strings are the beginning are for making colors print in the console. The line <code>public static void main(String[] args) {</code> is simply Java's way of telling what gets run and what is other things. <code>makeMatrix()</code> is also called which returns an <code>int[][]</code> to serve as the matrix for the ant.</p> <pre><code>    // moves before the ant stops\n    int ticks = 11000;\n\n\n    System.out.println();\n    printMatrix(matrix , matrixSize);\n    matrix[matrixSize / 2][matrixSize / 2] = 1;\n    System.out.println();\n    int iterations = 0;\n</code></pre> <p>More setup code is performed like printing the matrix with the method <code>printMatrix(matrix, matrixSize)</code>. When trying to print an actual matrix with <code>System.out.println()</code>, you will get something like <code>[[I@2ff4acd0</code>. To fix this so you can see the actual values of each of the indices in the matrix, we use a for loop to go through all of the elements.</p> <pre><code> while(ticks &gt; iterations){\n      // return new position of ant\n      System.out.println(direction);\n      antNew = moveAnt(realAntX, realAntY, direction);\n      realAntX = antNew[0];\n      realAntY = antNew[1];\n      // determine the direction we want the ant to go\n      direction = direction(direction, matrix, realAntX, realAntY);\n      // set the matrix to the opposite number\n      matrix[realAntX][realAntY] = matrixGet(realAntX, realAntY, matrix);\n      iterations += 1;\n  }\n  System.out.println();\n  printMatrix(matrix , matrixSize);\n}\n</code></pre> <p>This is the main chunk of the code that isn't the methods below. The while loop runs for as many times as specified by the value of ticks set earlier. Each of the methods will be explained below, so don't worry about those just yet. The position of the ant is stored into temporary values. Once the loop is done running, a blank print puts a space to make it look nice, and then the final matrix is printed.</p> <p><pre><code>  public static int[][] makeMatrix(int size){\n    return new int[size][size];\n  }\n  public static void printMatrix(int[][] m, int size){\n    for(int i = 0; i &lt; size  ; i++) {\n      System.out.println();\n      for(int a = 0; a &lt; size ; a++){\n        if(m[i][a] == 1) {\n          System.out.print(ANSI_RED + m[i][a] + ANSI_RESET +  \" \");\n        } else {\n          System.out.print(ANSI_BLACK + m[i][a] + ANSI_RESET + \" \");\n        }\n\n      }\n    }\n  }\n</code></pre> <code>makeMatrix(int size)</code> is really simple, but even simple methods make the code read easier</p> <p><code>printMatrix(int[][] m, int size)</code> takes the matrix and its size into account. The two for loops work together to loop through the whole matrix. The first loop finishes a line, and the second prints a black \"0\" or a red \"1\". If you think about how the loops work together, the second runs for a whole line, and when that is finished, the first one adds one to its value, thus looping to the next line.</p> <pre><code>  public static int[] moveAnt(int antx, int anty, int dir){\n    if(dir == 1){\n      anty += 1;\n    } else if (dir == 3){\n      anty -= 1;\n    }\n    if (dir == 2){\n      antx += 1;\n    } else if (dir == 4){\n      antx -= 1;\n    }\n    int[] newAnt = {antx, anty};\n    return newAnt;\n  }\n</code></pre> <p><code>moveAnt(int antx, int anty, int dir)</code> uses the ant's direction to determine what needs to happen to the ant's position. Depending on the variable <code>dir</code> a different value is added to the ants position. At the end, an array is returned to update the real ants position to that calculated in the method.</p> <pre><code>  public static int direction(int dir, int[][] m , int antx, int anty){\n    if (m[antx][anty] == 1){\n      dir += 1;\n    } else if (m[antx][anty] == 0){\n      dir -= 1;\n    }\n    if(dir &gt; 4) {\n      dir = 1;\n    } else if(dir &lt; 1) {\n      dir = 4;\n    }\n    return dir;\n  }\n</code></pre> <p>If you didn't look at the page on Langton's Ant, it is recommended. Basically, if the square is \"on\", the ant travels clockwise, and if the square is \"off\", the ant travels counterclockwise. The square is then inverted to be the opposite state of what it was. The first two if statements determine which direction that the ant needs to go, and the others make sure <code>dir</code> stays between 1 and 4. </p> <pre><code>  public static int matrixGet(int antx, int anty, int[][] m){\n    if(m[antx][anty] == 1){\n      return 0;\n    } else if (m[antx][anty] == 0){\n      return 1;\n    }\n    return 200;\n  }\n}\n</code></pre> <p><code>matrixGet(int antx, int anty, int[][] m)</code> gets the opposite value of what the ant is currently sitting on so it can be set in the <code>while</code> loop.</p> <p>Now that you know what each method does, it will probably make more sense about what is happening in the while loop.</p> <pre><code> while(ticks &gt; iterations){\n      // return new position of ant\n      System.out.println(direction);\n      antNew = moveAnt(realAntX, realAntY, direction);\n      realAntX = antNew[0];\n      realAntY = antNew[1];\n      // determine the direction we want the ant to go\n      direction = direction(direction, matrix, realAntX, realAntY);\n      // set the matrix to the opposite number\n      matrix[realAntX][realAntY] = matrixGet(realAntX, realAntY, matrix);\n      iterations += 1;\n  }\n  System.out.println();\n  printMatrix(matrix , matrixSize);\n}\n</code></pre> <p>Hopefully you found this tutorial helpful! There is a lot that has been left out of this tutorial, so if you need extra help, make a quick search on the interwebs. Many programmers use the Internet all the time to see how other people have accomplished the same tasks, and I implore you to take a look at how others approached making Langton's Ant. </p> <p>Remember that to really get good at Java Programming takes a lot of time, and don't be afraid of failing! Good luck in your Java adventure!</p>"},{"location":"old_docs/programming/basics/02-Java-Tutorial/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/03-Style-guide/","title":"Code Style Guide","text":"<p>Code is most readable when it's written in a consistent style, especially in a team setting. Please keep the following conventions in mind while writing Java for the robot. If there are any you don't understand, refer to the example at the bottom or ask a mentor/lead.</p> <ul> <li>Use camel case for regular variable and method names. Please name them with words or common abbreviations (like PID) if possible.</li> <li>Use all-caps snake case for constant variable names. Also name these with words or common abbreviations.</li> <li>In statements, put one space between the reserved word and the parentheses (and the curly bracket if you have one.)</li> <li>The first curly bracket of a block should not go on its own line.</li> <li>The contents of a block should only be single-indented.</li> <li>Use one empty line to separate sections of code and method definitions. Sections include <code>import</code>s, the instance variables, the constructor, and then everything below. You can make subsections of these too, but be careful not to make too many.</li> <li>Try to keep individual lines of code under 120 characters. VS Code has a faint grey line as you scroll right to help indicate this. If you need to shorten a line, try creating \"temporary\" variables to split up and store individual components.</li> <li>Don't forget to remember to use plenty of comments. If you think you're using enough comments, you probably need to add more.</li> <li>If you can't remember a specific convention or don't understand one yet, just look around the code and use common sense. As long as it looks okay, it's probably fine.</li> <li>Nesting is bad. If you can avoid it, do so.</li> </ul> <p>You should get in the habit of using <code>Shift + Alt + F</code> often - this is a shortcut in VS Code that performs some formatting on your code automatically, such as spacing, bracket placement, and line character limits. This is especially useful when copy-pasting.</p> <p>Example: <pre><code>// Imports\nimport java.example;\n\n// Instance variables\nfinal boolean EXAMPLE_CONSTANT = true;\nboolean exampleVariable;\n\n// Constructor\npublic Example(boolean exampleVariable) {\n    this.exampleVariable = exampleVariable;\n}\n\n// Other code\nif (exampleVariable) {\n    doCode();\n} else {\n    // Remember to use plenty of comments\n    doOtherCode();\n}\n\n// Method\npublic void doCode() {\n    // This is a \"temporary\" variable used for splitting up a long line of code\n    boolean exampleSplit = exampleVariable.doSomething().doSomethingElse();\n    exampleSplit.doOneMoreThingThatMadeThePreviousLineTooLong();\n    System.out.println(\"This is pretty nice code\");\n}\n\n/**\n * You might also see some comments that look like this.\n * This is called Javadoc. It's responsible for the tooltips VS Code shows when you hover over something.\n * If you have experience with JSDoc, it's basically the same thing.\n */\npublic void doOtherCode() {\n    System.out.println(\"This is pretty nice code\");\n} \n</code></pre></p>"},{"location":"old_docs/programming/basics/03-Style-guide/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/04-Getting-started-with-the-robot/","title":"Getting started with the robot","text":"<p>In this article, you will learn how to make edits to the robot's code and get the updated code onto the robot.</p> <p>You should have already followed the Installing programs articles at this point. If not, go back to Home and do those first.</p>"},{"location":"old_docs/programming/basics/04-Getting-started-with-the-robot/#editing-code","title":"Editing code","text":"<p>Before editing, it's always a good idea to pull the latest version of the code from GitHub. Clicking the Pull button in your version control software will download the latest version of the code to your computer. (If you already have it open in VSCode, any changes are reflected immediately.)</p> <p>In VSCode, open the folder you saved the repo to -- hopefully you remember where that is! In the folder view, navigate to src &gt; main &gt; java &gt; frc &gt; robot. You'll see something like this:</p> <p>\ud83d\udcc1 commands \ud83d\udcc1 libraries \ud83d\udcc1 subsystems \ud83d\udcc4 Constants.java \ud83d\udcc4 Main.java \ud83d\udcc4 Robot.java \ud83d\udcc4 RobotContainer.java</p> <p>You don't need to be familiar with all of this yet, but in case you're curious, here's what each file and folder is for:</p> <ul> <li><code>Main.java</code> just starts the program -- you'll probably never need to touch it.</li> <li><code>Robot.java</code> controls what automatically happens. There are different \"methods\" that run at different times, such as when the robot starts, while the robot is running, and during different phases of the FRC game, such as before/during autonomous and teleop. However, besides what's already there, programmers should only add things like diagnostics and logging.</li> <li><code>RobotContainer.java</code> controls everything that the robot actually does. This is where joysticks and buttons are hooked up to their corresponding code. The code run during autonomous and teleop is also hooked up here.</li> <li><code>Constants.java</code> stores things that won't change while the robot runs, such as wheel sizes and motor ports. This makes them easy to change while the robot isn't running if needed.</li> <li>Most of the robot's functionality is programmed out within subsystems, which are stored in the <code>subsystems</code> folder.</li> <li>To actually carry out this functionality, commands are used, which are stored in the <code>commands</code> folder.</li> <li>Libraries are like addons for Java, and they're stored in the <code>libraries</code> folder. You've already installed the CTRE Phoenix library, but that's actually a vendor library, so it won't show up in this folder. You probably won't need to touch this unless you're adding a new library.</li> </ul> <p>Don't get overwhelmed by all of this -- we're going to take it one step at a time in the following articles. To get started, let's hook up a command to a button in <code>RobotContainer.java</code>:</p> <ol> <li>Open the <code>RobotContainer.java</code> file in VSCode.</li> <li>Scroll down to the \"Joysticks and Buttons\" section -- we're going to add a new button.</li> <li>At the bottom of the \"Joystick buttons\" area, type <code>private final JoystickButton Button999 = new JoystickButton(stick1, 999);</code>. This creates a new button object -- if there were a button with the ID \"999\" on the joystick, this object would be used to detect its presses.</li> <li>Scroll down to the line that has <code>private void configureButtonBindings()</code> in it -- we're going to hook up an example command to the button.</li> <li>Inside the curly brackets, there are a bunch of lines that start with \"Button\". Create a new line below these and type <code>Button999.whenPressed(new ExampleCommand(ExampleSubsystem));</code>. Since this is just practice, this code won't do anything, but it's the same structure used when actually adding a real button. You'll learn more about this in the following articles.</li> </ol>"},{"location":"old_docs/programming/basics/04-Getting-started-with-the-robot/#sending-code","title":"Sending code","text":"<p>It's great to have some cool code, but it doesn't do any good just sitting on your computer. We want everyone to be able to access it, but more importantly, we want it running on the robot!</p>"},{"location":"old_docs/programming/basics/04-Getting-started-with-the-robot/#pushing-to-github","title":"Pushing to GitHub","text":"<p>To push your code to the GitHub repository using GitKraken:</p> <ul> <li>Save (Ctrl + S) whatever you're working on in VSCode.</li> <li>Whenever you work on something experimental, incomplete, or untested (or just want to save your progress so you can edit at home), you'll make a new branch by clicking the Branch button. Since what we're doing is just practice, do this now. (To switch back to another branch, double-click the branch you want to switch to.)</li> <li>Click the \"View changes\" button in the right panel of GitKraken, then click \"Stage all changes.\"</li> <li>Add a (helpful) summary of the changes you made in the commit message, then click the \"Commit changes\" button.</li> <li>At this point, your \"commit\" is only saved on your computer. Make sure you click the Push button to upload your changes so that everyone can see them! (You'll see a little 2530 icon in the branch label if the commit is uploaded.)</li> <li>This shouldn't happen with this tutorial since you're not merging any branches, but if your software ever alerts you of a merge conflict, STOP! Do not proceed or try to resolve the issue. Ask a lead for help.</li> </ul> <p>If you're using a different program, the process is generally the same.</p>"},{"location":"old_docs/programming/basics/04-Getting-started-with-the-robot/#deploying-to-the-robot","title":"Deploying to the robot","text":"<p>To deploy your code to the actual robot: (the robot has to be physically in the same building as you for this to work)</p> <ol> <li>In VSCode, select the input box at the top with the little WPILib logo in it.</li> <li>Type \"Build Code\" and select the option that appears. This makes a robot-ready version of the code for you.</li> <li>Ensure that the robot is on (if it's not, with permission, turn the robot on) and connect your computer to the RoboRIO's Wi-Fi network. It will say \"No internet\" -- that's supposed to happen, since you're connected directly to the robot, not the Internet.</li> <li>In the same input box, type \"Deploy Code\" and select the option that appears. This actually SENDS the code that you built in Step 2. Nothing will change if you forget this step!</li> </ol> <p>If you've finished this article, great work! The next step is to learn more about subsystems.</p>"},{"location":"old_docs/programming/basics/04-Getting-started-with-the-robot/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/05-Subsystems/","title":"Subsystems","text":"<p>Subsystems are where methods are created and defined. They're organized by the part of the robot they're for (elevator, LimeLight, shooter, etc.)</p>"},{"location":"old_docs/programming/basics/05-Subsystems/#to-create-a-new-subsystem","title":"To create a new subsystem:","text":"<ol> <li>Right-click on the <code>subsystems</code> folder.</li> <li>Go to the bottom of the context menu that appears and select \"Create a new class/command\".</li> <li>In the input box that appears at the top, type/click <code>Subsystem (New)</code>.</li> <li>Give it a relevant name.</li> <li>Open <code>RobotContainer.java</code> and scroll down to where it says <code>// --- Subsystems --- \\\\</code>.</li> <li>Below the other subsystem declarations, type <code>private final NAME VARNAME = new NAME();</code>, where NAME is the file name you gave your subsystem and VARNAME is a new name to reference in code. If applicable, add any required parameters in the parentheses.</li> </ol>"},{"location":"old_docs/programming/basics/05-Subsystems/#to-add-methods-to-a-subsystem","title":"To add methods to a subsystem:","text":"<ol> <li>Open your subsystem's file.</li> <li>Go to the very bottom of the file (just before the last bracket) and hit enter a couple of times. Then add a new method:</li> <li>Type <code>public</code>. This will allow the method to be used outside of the subsystem file.</li> <li>Type <code>void</code> if the method won't return a value. Otherwise, enter the data type you want the method to return.</li> <li>Type your method's name, then immediately afterwards, type a set of parentheses. <code>()</code></li> <li>Inside the parentheses, add your parameters -- inputs that are passed into the method as premade variables. Like normal variables, you need to provide the data type and a parameter name.</li> <li>After the parentheses, type a <code>{</code> and press enter. This is where you'll write your method's code. In VSCode, a <code>}</code> should automatically appear where it needs to be.</li> </ol>"},{"location":"old_docs/programming/basics/05-Subsystems/#to-call-subsystem-methods","title":"To call subsystem methods:","text":"<p>These methods shouldn't actually be run within the subsystem files, only defined. That's what commands are for.</p>"},{"location":"old_docs/programming/basics/05-Subsystems/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/06-Commands/","title":"Commands","text":"<p>Commands are where the methods created in the subsystems are actually run. They're named with a short summary of what they do.</p>"},{"location":"old_docs/programming/basics/06-Commands/#to-create-a-new-command","title":"To create a new command:","text":"<ol> <li>Right-click on the <code>commands</code> folder.</li> <li>Go to the bottom of the context menu that appears and select \"Create a new class/command\".</li> <li>In the input box that appears at the top, type/click <code>Command (New)</code>.</li> <li>Give it a relevant name.</li> </ol>"},{"location":"old_docs/programming/basics/06-Commands/#to-add-subsystem-methods-to-a-command","title":"To add subsystem methods to a command:","text":"<ol> <li>You're going to need to <code>import</code> your subsystem methods before you can call them. In the command file, beneath the other <code>import</code>s, type <code>import frc.robot.subsystems.NAME;</code>, where <code>NAME</code> is the file name of your subsystem.</li> <li>Now just call the methods from your subsystems inside the proper area of the command file.</li> <li>To call a method, type <code>NAME(PARAMETERS);</code>, where <code>NAME</code> is the method name and <code>PARAMETERS</code> are the inputs you defined the method to need.</li> <li>The <code>initialize()</code> area will only run once -- when the command is called.</li> <li>The <code>execute()</code> area will run repeatedly after the command has been called.</li> <li>The <code>end()</code> area will run when the command is stopped.</li> <li>The <code>isFinished()</code> area constantly evaluates the conditional after <code>return</code>, and when it's true, <code>end()</code> is run.</li> </ol>"},{"location":"old_docs/programming/basics/06-Commands/#to-call-commands","title":"To call commands:","text":"<p>You're not quite done yet! Commands don't just start doing things magically! The final step is to actually run the command.</p> <ol> <li> <p>Locate the place where you want to run your command.</p> </li> <li> <p>If you're running the command in <code>RobotContainer.java</code>, you don't need to <code>import</code> the command, as it's already hooked up to do that. If you're running it somewhere else, beneath the other <code>import</code>s, type <code>import frc.robot.commands.NAME;</code>, where <code>NAME</code> is the name of the command.</p> </li> <li> <p>A common scenario is hooking up your command to a joystick button. To do this, open <code>RobotContainer.java</code> (no need to <code>import</code>) and scroll down to the \"Joysticks and Buttons\" section. At the bottom of the \"Joystick buttons\" area, type <code>private final JoystickButton ButtonBUTTON = new JoystickButton(CONTROLLER, BUTTON);</code>, where <code>CONTROLLER</code> is the name of the controller and <code>BUTTON</code> is the ID of the button you want to link to (Google the controller if you're not sure what this is). Now scroll down to the <code>configureButtonBindings()</code> area and type <code>ButtonBUTTON</code>. If you want the command to run only once, type <code>.whenPressed();</code> -- otherwise, type <code>.whileHeld();</code>. Type Step 2 inside the parentheses.</p> </li> <li> <p>Type <code>new NAME()</code>, where <code>NAME</code> is the command's file name.</p> </li> </ol>"},{"location":"old_docs/programming/basics/06-Commands/#about-instant-commands","title":"About instant commands","text":"<p>If you only need to do a simple task (such as running a single method when a button is pressed) you don't have to go through the process of setting up an actual command. You can instead directly call those methods from the subsystem. Instead of typing <code>new NAME()</code>, type <code>() -&gt; VARNAME.FUNCNAME()</code>, where <code>VARNAME</code> is the name of the subsystem's variable and <code>FUNCNAME</code> is the name of the method in the subsystem you want to run. If you want to pass parameters, you have to put them inside the first set of parentheses.</p> <p>If you've made it this far, you've learned almost all the basics of FRC programming! The final step before putting it into practice is learning more about constants.</p>"},{"location":"old_docs/programming/basics/06-Commands/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/07-Constants/","title":"Constants","text":"<p>Constants are values that will stay the same while the robot runs, such as wheel sizes and motor ports. They're a useful way to change specific aspects of the robot without being familiar with the code for those components, which makes them essential in a team setting. They're all stored in <code>Constants.java</code> to make it even more convenient.</p>"},{"location":"old_docs/programming/basics/07-Constants/#changing-constants","title":"Changing constants","text":"<p>This is pretty much just common sense. 1. Open <code>Constants.java</code>. 2. Find the constant you want to edit. The provided sections should help you. 3. Change its value.</p>"},{"location":"old_docs/programming/basics/07-Constants/#adding-constants","title":"Adding constants","text":"<p>This is also pretty simple. 1. Open <code>Constants.java</code>. 2. Locate the section your constant should go in. (You can create one if needed -- just copy the heading from another section.) 3. At the bottom of the section, type <code>public static final TYPE NAME = VALUE;</code>, where <code>TYPE</code> is the data type, <code>NAME</code> is whatever you want to name your constant, and <code>VALUE</code> is the value of your constant.</p>"},{"location":"old_docs/programming/basics/07-Constants/#using-constants","title":"Using constants","text":"<ol> <li>Open the file you want to use the constant in.</li> <li>In the imports area, type <code>import frc.robot.Constants.NAME;</code>, where <code>NAME</code> is the name of the constant.</li> <li>Whenever you need the constant's value, simply type the constant's name.</li> </ol> <p>Alternatively, you can just import all of the constants right away by typing <code>import frc.robot.Constants</code>. Then, just type <code>Constants.</code> before typing your constant's name. Whether or not you do this is up to personal preference.</p> <p>If you've read every article up to this point, you've learned the basics of FRC programming! All that's left is putting it into practice with specific components of the robot. Get started by learning about programming motors. For any components not documented in this wiki, you should be able to figure out how to program them by either looking at current/previous years' programming of them or looking up the official documentation.</p>"},{"location":"old_docs/programming/basics/07-Constants/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/08-Programming-Reference-Links/","title":"Programming reference links","text":"<p>Documentation From CTR Electronics</p> <p>Documentation From WPI </p> <p>(WPI) Java Packages</p> <p>CAN Bus Cheat Sheet</p> <p>Chief Delphi</p>"},{"location":"old_docs/programming/basics/08-Programming-Reference-Links/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/Joysticks-and-buttons/","title":"Joysticks and Buttons","text":"<p>You already learned the basics of button mapping in the getting started article, but this article goes more into the specifics of our controllers.</p>"},{"location":"old_docs/programming/basics/Joysticks-and-buttons/#types-of-controllers","title":"Types of controllers","text":"<p>There are two different flavors of controllers, and the drive team tends to use both of them every year.</p>"},{"location":"old_docs/programming/basics/Joysticks-and-buttons/#joystick","title":"Joystick","text":"<p>(https://images-na.ssl-images-amazon.com/images/I/414X2Z0A7TL.SY450.jpg)</p> <p>This is a large joystick that's used with the whole hand. It has a solid rubber base that prevents it from slipping around on the drive station. There are also various buttons on it which allow various actions to be performed quickly. This is typically used by the driver, who pilots the robot around the field. We have two of these available for use -- when we only use one, we call it single-stick drive or arcade drive, and when we use both, we call it dual-stick drive or tank drive.</p>"},{"location":"old_docs/programming/basics/Joysticks-and-buttons/#xbox-controller","title":"Xbox Controller","text":"<p>We also use a transparent Xbox One controller that can glow because we're fancy and epic gamer. In all seriousness, it's held with two hands and has a lot of buttons available for use. It's typically used by the operator, who manages the robot's internal systems such as the intake, revolver, shooter, etc. We just have one, but it's worth noting that it includes 2 joysticks and a D-pad, which is a more limited joystick.</p>"},{"location":"old_docs/programming/basics/Joysticks-and-buttons/#using-the-controllers","title":"Using the controllers","text":"<p>Some notes on axis/buttons:</p> <ul> <li>Throttle is axis 3 (Joystick, used for powerfactor)</li> <li>Joystick buttons\u2019 numbers are written on the button</li> <li>Most axises return between -1 and 1</li> <li>Triggers return between 0 and 1 or -1 and 0 (xbox)</li> <li>Joystick has 12 buttons each</li> <li>Xbox has 10 buttons, but only first 6 commonly used</li> </ul> <p>Here are some external resources on each controller type:  </p> <ul> <li>Joystick </li> <li>Xbox</li> </ul>"},{"location":"old_docs/programming/basics/Joysticks-and-buttons/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/Laptop-Rules/","title":"Laptop Rules","text":""},{"location":"old_docs/programming/basics/Laptop-Rules/#laptop-conduct","title":"LAPTOP CONDUCT","text":"<p>Common sense. That's about it.</p> <ul> <li>Don't steal someone else's laptop. (They'll have masking tape with their name on theirs if they've claimed one.)</li> <li>Don't install programs that aren't needed. They take up space on the laptops and will have to be uninstalled later, taking up precious team time. If you really need it, use the web version (Spotify, Discord, etc). If you aren't sure if a program is needed, you can always ask a lead!</li> <li>These are not \"your\" laptops. They are team laptops. Some personalization is okay, but don't overhaul the device. </li> <li>When installing programs, check with a coach or at least a programming lead to make sure it's okay.</li> <li>Don't mess with the laptop. No pulling out keys, no stealing the plastic SD card slot fillers, no scratching at the plastic coating to make it look weird. Don't commit stupid.</li> </ul>"},{"location":"old_docs/programming/basics/Laptop-Rules/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/Programming-motors/","title":"Programming motors","text":"<p>Programming motors is the most fundamental programming task in FIRST, as motors control all robot movement. Motors are typically hooked up to motor controllers, which allow programmatic control of motor speed and direction.</p> <p>You should have already followed the Installing programs articles at this point. If not, go back to Home and do those first. If you skipped installing the CTRE Phoenix library, make sure you go back and do that now.</p> <p>First, determine what subsystem you're working in. If you're adding a new component to the robot, create a new subsystem.</p> <p>We have a couple different flavors of motor controllers. Make sure you know which one you're programming for before you get started.</p>"},{"location":"old_docs/programming/basics/Programming-motors/#programming-the-talon-srx","title":"Programming the Talon SRX","text":"<p>Full documentation here</p> <p>Start by doing <code>import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;</code>, then define the motor controller by typing <code>private static WPI_TalonSRX MOTORNAME = new WPI_TalonSRX(PORT);</code> at the top of the subsystem's class, where <code>MOTORNAME</code> is what you want to name the motor and <code>PORT</code> is the port that the motor is connected to. (For <code>PORT</code>, it's best to store this value as a constant.)</p> <p>Set the speed of the motor by using <code>MOTORNAME.set(SPEED)</code>, where <code>NAME</code> is the name of the motor and <code>SPEED</code> is a double-type value between -1 and 1.</p>"},{"location":"old_docs/programming/basics/Programming-motors/#programming-the-talon-fx","title":"Programming the Talon FX","text":"<p>Full documentation here</p> <p>Start by doing <code>import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;</code>, then define the motor controller by typing <code>private static WPI_TalonFX MOTORNAME = new WPI_TalonFX(PORT);</code> at the top of the subsystem's class, where <code>MOTORNAME</code> is what you want to name the motor and <code>PORT</code> is the port that the motor is connected to. (For <code>PORT</code>, it's best to store this value as a constant.)</p> <p>Set the speed of the motor by using <code>MOTORNAME.set(SPEED)</code>, where <code>NAME</code> is the name of the motor and <code>SPEED</code> is a double-type value between -1 and 1.</p> <p>If you need to rotate the motor a specific amount, use <code>setSelectedSensorPosition(getSelectedSensorPosition() + (ANGLE / 360 * Constants.ENCODER_TICKS_PER_REVOLUTION), 0, TIMEOUT);</code> where <code>ANGLE</code> is the amount of degrees to turn the motor and <code>TIMEOUT</code> is the number of milliseconds for stall detection. You can use this with a try-catch to detect if it takes longer than this, as it will throw an error.</p>"},{"location":"old_docs/programming/basics/Programming-motors/#programming-the-victor-spx","title":"Programming the Victor SPX","text":"<p>Full documentation here</p> <p>Start by doing <code>import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;</code>, then define the motor controller by typing <code>private static WPI_VictorSPX MOTORNAME = new WPI_VictorSPX(PORT);</code> at the top of the subsystem's class, where <code>MOTORNAME</code> is what you want to name the motor and <code>PORT</code> is the port that the motor is connected to. (For <code>PORT</code>, it's best to store this value as a constant.)</p> <p>Set the speed of the motor by using <code>MOTORNAME.set(SPEED)</code>, where <code>NAME</code> is the name of the motor and <code>SPEED</code> is a double-type value between -1 and 1.</p>"},{"location":"old_docs/programming/basics/Programming-motors/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/RobotCodingGuideLines/","title":"Robot Coding Guide Lines","text":""},{"location":"old_docs/programming/basics/RobotCodingGuideLines/#swerve-module","title":"Swerve module","text":"<ul> <li>Speed should be in meters per second, not meters per minute.</li> <li>Internally to the SwerveModule class, Swerve module steer position should be in rotations with a range of [-0.5, 0.5). This is the unit the CANCoder and Spark Max use. External to the SwerveModule, use radians [-Pi, Pi).</li> <li>Use closed loop on the Spark Max motor controller, not a PIDController on the roboRIO. There are several reason you probably want to do this:<ul> <li>You pay big money for smart motor controllers, so use them.</li> <li>On the motor controller the encoder value is read directly, it doesn't have to come over the CAN network first.</li> <li>Motor controller closed loop runs at 1000Hz where the roboRIO only runs at 50hz.</li> <li>Let the motors and encoders handle your offsets and inversions. Configure them once, and let them handle the math.</li> </ul> </li> <li>Use the CANCoders waitForUpdate() function when getting it's absolute position on startup.</li> <li>Set offsets in rotations (avoiding conversion from degrees to radians to rotations.) There was also some math going on to rotate them by pi/2 radians.</li> <li>Set CANCoder absolute encoder SensorDirection to CounterClockwise_Positive</li> <li>Set Drive and Steer motor inversion (so positive output is forward drive and counter-clockwise steer)</li> <li>Correct SwerveDriveKinemetics. Forward is +X, left is +Y<ul> <li>BR is (-, -)</li> <li>FR is (+, -)</li> <li>BL is (-, +)</li> <li>FL is (+, +)</li> </ul> </li> <li>Correct conversion from CANCoder position to steer motor encoder position. It was incorrectly converting from rotations to radians, but both are rotations.</li> <li>Return steer position in a Rotation2d object from getSteerPosition() so the units are always clear (and since all uses of the method are creating Rotation2d anyway.)</li> </ul>"},{"location":"old_docs/programming/basics/RobotCodingGuideLines/#implement-spark-max-configuration-best-practice","title":"Implement Spark Max configuration best practice:","text":"<ul> <li>Call restoreFactoryDefaults() before configuring to clear out any existing configuration. This is important so no old values stick around in the settings we are not explicitally configuring.</li> <li>Call burnFlash() after configuration so the settings persist across power cycle. This is important in case your motor controller has a power glitch during a match, since configuration only happens when the robot program starts.</li> </ul>"},{"location":"old_docs/programming/basics/RobotCodingGuideLines/#command","title":"Command","text":"<ul> <li>It is not good practice to read button values in a command. Use button bindings.</li> </ul>"},{"location":"old_docs/programming/basics/RobotCodingGuideLines/#phoenix","title":"Phoenix","text":"<ul> <li>Phonix5 will give the wheel/magnet alignment in driver station. The issue is not easily reproduced, but the most likely way to get it to happen is to restart the robot code (boot the robot, \"restart code\" from driver station, or deploy the code) and enable the robot as quickly as you can. When the problem occurs, one or more wheels will not point the right direction. Upgrade to to Phoenix 6</li> </ul>"},{"location":"old_docs/programming/basics/RobotCodingGuideLines/#this-is-our-intended-drive-scheme-for-the-existing-swerve-repo","title":"This is our intended drive scheme for the existing Swerve repo:","text":"<ul> <li>Robot movement to the left is +Y on the field, but -X on the left controller stick.</li> <li>Robot movement forward is +X on the field, but -Y on the left controller stick.</li> <li>Robot rotation is +left on the field, but -X on the right controller stick. Based on this scheme, the DriveCommand needed adjustment:</li> <li>All of the axes need to be inverted.</li> <li>The correct controller sticks need to be controlling the correct translation components.</li> <li>Also, never use System.out.println() within the robot loop. It will flood the console to the point of lagging your robot. Use the SmartDashboard/NetworkTables to send the value to the driver station.</li> </ul>"},{"location":"old_docs/programming/basics/RobotCodingGuideLines/#the-following-fixes-added-in-drivetrainsubsystem-of-exsiting-swerve-repo","title":"The following fixes added in DrivetrainSubsystem of exsiting Swerve repo:","text":"<ul> <li>The NAVX gyro angle needs to be inverted. NavX's getAngle() returns the heading with clockwise positive, which is backwards from WPILib.</li> <li>For zero the heading, you need to reset odometry. I assume the intent is that the robot's current heading becomes zero, but the robot's estimated translation stays the same.</li> </ul>"},{"location":"old_docs/programming/basics/RobotCodingGuideLines/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/basics/SysID/","title":"SysID","text":"<p>https://docs.wpilib.org/en/stable/docs/software/pathplanning/system-identification/introduction.html</p>"},{"location":"old_docs/programming/basics/SysID/#objective","title":"Objective","text":"<p>The objective of this was to create a predictive model for the voltage-speed relation in Mostly Dead To do this, we used a WPI Lib application, inputting various mechanical details about the robot (ports, encoder specifics, etc.) WPILib then ran diagnostics on the robot, and measured the distance traveled, and other various factors about the system we were        tracking (energy loss, including via friction)</p>"},{"location":"old_docs/programming/basics/SysID/#learning","title":"Learning:","text":"<p>We learned how to calculate voltage, and how it functions on Mostly Dead. We also learned the methodology, so that we could apply it to other robots (only differential drive ones) We also learned everything else in this document The constants.java file was not accurate to the physical ports of the robot</p>"},{"location":"old_docs/programming/basics/SysID/#troubleshooting","title":"Troubleshooting:","text":"<p>If SysID isn't functioning, restart it. Ensure driver station is running</p>"},{"location":"old_docs/programming/basics/SysID/#data-constants-acquired","title":"Data (constants acquired):","text":"<p>Static friction constant: .098141 Velocity: .056505 Acceleration: .0090187</p>"},{"location":"old_docs/programming/basics/SysID/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/git/gitignore/","title":"gitignore","text":"<p>A <code>.gitignore</code> file is a file which controls which files get upload to our version control system (git). We use it to select the files that we don't want to share, e.g. Compiled Java class files, log files, and JVM crash logs. You can view a working <code>.gitignore</code> for a typical robot here.</p>","tags":["Git","Common Issue"]},{"location":"old_docs/programming/git/gitignore/#gitignore-doesnt-work","title":"<code>.gitignore</code> doesn't work","text":"<p>This happens when the files you're trying to ignore have already been committed in the repository.</p>","tags":["Git","Common Issue"]},{"location":"old_docs/programming/git/gitignore/#how-to-fix","title":"How to fix","text":"<ol> <li>Remove the directories and files you want to be ignored. If some of these aren't autogenerated (you want to keep them), just move them somewhere else temporarily.</li> <li>Create and push a commit to the affected branch of the repository.</li> <li>For any directories or files that you chose to keep, move them back to their original locations.</li> </ol>","tags":["Git","Common Issue"]},{"location":"old_docs/programming/git/gitignore/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Git","Common Issue"]},{"location":"old_docs/programming/setup/Setting-up-FRC-Driver-Station/","title":"Setting up FRC Driver Station","text":"<p>FRC Driver Station is software that enables a computer to be utilized as (surprise surprise) a driver station for FRC robots. This software is required to be installed on at least one computer we bring to competitions in order to control our robot.</p>"},{"location":"old_docs/programming/setup/Setting-up-FRC-Driver-Station/#installation","title":"Installation","text":"<p>Only computers with Windows are supported. (Unacceptable. Smh National Instruments)</p> <p>Follow the instructions on this page to install the FRC Game Tools, which includes Driver Station. When you get to the point where it asks you to create an account, just go ahead and create your own. You can trust the company with your personal information.</p>"},{"location":"old_docs/programming/setup/Setting-up-FRC-Driver-Station/#configuration","title":"Configuration","text":"<p>Go to the Settings tab on the left side of the screen and enter <code>2530</code> in the Team Number field. The robot will not be able to communicate with Driver Station if this is not set. Also, set the Dashboard Type to <code>Shuffleboard</code>.</p> <p></p> <p>Once Shuffleboard opens, go to <code>File &gt; Load layout</code> and select the <code>shuffleboard.json</code> file saved in this year's robot code.</p> <p>Now connect the drive joystick to your computer and go to the USB tab. Make sure that the port number shown for the joystick is the same as the port number defined in the robot code. In this example, if the declaration of the controller is <code>Joystick stick1 = new Joystick(0);</code> then you're good to go!</p> <p></p>"},{"location":"old_docs/programming/setup/Setting-up-FRC-Driver-Station/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/setup/Setting-up-Java/","title":"(Deprecated) Setting up Java","text":""},{"location":"old_docs/programming/setup/Setting-up-Java/#this-article-is-deprecated-you-no-longer-need-to-manually-install-java-as-it-is-bundled-with-the-wpilib-vscode-installation","title":"THIS ARTICLE IS DEPRECATED. You no longer need to manually install Java, as it is bundled with the WPILib VSCode installation.","text":"<p>This one has a couple steps to it, you need both the JRE and JDK to program.</p>"},{"location":"old_docs/programming/setup/Setting-up-Java/#note-one-consideration-you-have-to-make-is-that-all-laptops-are-running-that-same-version-of-java-this-way-we-can-rule-out-mismatched-versions-of-java-for-causing-problems-with-code","title":"Note: one consideration you have to make is that all laptops are running that same version of Java; this way we can rule out mismatched versions of Java for causing problems with code.","text":"<p>Since it would be troublesome to update the links all the time, just look up the download pages for the Java 8 JRE and JDK.</p> <p>Once both are installed, you should be good.</p>"},{"location":"old_docs/programming/setup/Setting-up-Java/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/setup/Setting-up-VSCode/","title":"Setting up VSCode","text":"<p>Visual Studio Code (VS Code) is the software that replaced Eclipse as the primary IDE for FIRST in 2019. The WPILib version adds features to aid in development of FIRST robots. We use this software to write our robot code.</p>"},{"location":"old_docs/programming/setup/Setting-up-VSCode/#installation-on-windows-macos-and-linux-recommended","title":"Installation on Windows, macOS, and Linux (recommended)","text":"<p>It's important to use the version that matches up with the season to ensure that everyone can use the same features and to avoid unnecessary bugs across Java versions. (For example, during the 2022 season, FRC VS Code 2022 should be used.)</p> <p>Follow these instructions to install the WPILib version of VS Code, which includes the latest version of Java.</p> <p>Once you're done with that, we recommend that you install the Better Comments extension. This allows us to make \"special\" comments that are colored differently and are more attention-grabbing. To install this:</p> <ol> <li>Open VS Code and click on the Extensions tab in the toolbar on the very left of the screen.</li> <li>Search \"Better Comments\" and click on the one that says \"Aaron Bond\".</li> <li>On the description page that pops up, click \"Install\".</li> </ol>"},{"location":"old_docs/programming/setup/Setting-up-VSCode/#updating","title":"Updating","text":"<p>Several updates are made available throughout the build season, which contain important fixes. These updates are often required to be installed come competition time. Luckily, WPILib made it easy to update:</p> <ol> <li>Press the WPILib button in the top-right corner of the screen.</li> <li>Start typing \"Check for WPILib Updates\" and select the top option that appears.</li> <li>Click \"Online\" in the prompt that appears. If there's an update, just wait for it to do its thing.</li> </ol>"},{"location":"old_docs/programming/setup/Setting-up-VSCode/#using-the-web-version-for-chromebooks-or-other-devices-not-recommended","title":"Using the web version for Chromebooks or other devices (not recommended)","text":"<p>If you don't have access to a computer at home that runs Windows, macOS, or Linux, you can use the web version of VS Code integrated with GitHub. We generally don't recommend this since you won't have any autocomplete functionality, error reporting, or library support, and you won't be able to build and deploy to the robot. However, it's an effective way to get some programming done if you only have access to a Chromebook.</p> <ol> <li>Open the repository you want to edit on github.com.</li> <li>Press the <code>.</code> (period) key on your keyboard.</li> <li>Once the web editor has loaded, create a bookmark so you can quickly access it later.</li> </ol> <p>This editor auto-saves your changes to your browser, so you don't need to worry about needing to commit or losing your changes when you close the tab or shut the lid on your Chromebook.</p>"},{"location":"old_docs/programming/setup/Setting-up-VSCode/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/setup/Setting-up-the-CTRE-Phoenix-library/","title":"Setting up the CTRE Phoenix library","text":"<p>The CTRE Phoenix library is required to program our CTRE motors. In this article, we'll focus on the library, but the installer also comes with Phoenix Tuner, which is explained here.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-CTRE-Phoenix-library/#computer-installation","title":"Computer installation","text":"<p>CTRE Phoenix Framework only supports Windows, macOS, and Linux. If you're using a Chromebook or another device, you can still edit code, but you won't be able to build and deploy to the robot. Make sure that you have administrator privileges on your computer before starting.</p> <ol> <li>Download the latest release of the CTRE Phoenix Framework from this page.</li> <li>Run the installer that you downloaded. Make sure that the C++/Java option is selected -- you don't need to worry about the other options.</li> <li>Close the installer when it's finished installing.</li> </ol>"},{"location":"old_docs/programming/setup/Setting-up-the-CTRE-Phoenix-library/#vscode-installation","title":"VSCode installation","text":"<p>To make sure that everything is up and running, check if the vendor library is installed:</p> <ol> <li>Open any file in VSCode.</li> <li>Click on the WPILib icon in the upper-right corner.</li> <li>Type \"Manage Vendor Libraries\" and select the option that appears.</li> <li>Select \"Manage current libraries\".</li> <li>Check to see that \"CTRE-Phoenix\" is in the list. If it is, you can click outside of the prompt to close it.</li> </ol> <p>If, for whatever reason, you don't see \"CTRE-Phoenix\" in the list, first make sure that the robot has been set up for the season.</p> <p>Learn how to program motors with the library in the Programming motors article.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-CTRE-Phoenix-library/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/setup/Setting-up-the-PixyCam2/","title":"Setting up the PixyCam2","text":"<p>The PixyCam2 (or just Pixy) is a camera with built-in object recognition.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-PixyCam2/#installing-pixymon","title":"Installing Pixymon","text":"<p>The software that configures this object recognition (Pixymon) needs to be downloaded to a computer. The download page is here -- if that doesn't work, just do a web search for Pixymon and it'll probably be the first page.</p> <p>Further instructions can be found in the \"installation docs\" underneath the download links on the page above.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-PixyCam2/#installing-libraries","title":"Installing libraries","text":"<p>Follow the instructions here: https://github.com/PseudoResonance/Pixy2JavaAPI#readme</p>"},{"location":"old_docs/programming/setup/Setting-up-the-PixyCam2/#configuring-hardware","title":"Configuring hardware","text":"<p>If you're using the Pixy with a Raspberry Pi, follow these instructions.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-PixyCam2/#api-docs","title":"API docs","text":"<p>https://ci.otake.pw/job/Pixy2JavaAPI/javadoc/index.html?overview-tree.html</p> <p>The concepts are better explained here: https://docs.pixycam.com/wiki/doku.php?id=wiki:v2:full_api</p>"},{"location":"old_docs/programming/setup/Setting-up-the-PixyCam2/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/setup/Setting-up-the-Raspberry-Pi/","title":"Setting up the raspberry pi","text":"<p>This page will explain how to set up the Pixy with the Raspberry Pi.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-Raspberry-Pi/#powering-the-pi","title":"Powering The Pi","text":"<p>Plug in the jumper wires into pins 4 and 6, with the red wire into 4 and the black wire into 6. Make sure to give the Raspberry Pi at LEAST 2 amps at 5 volts. Anything lower, and you might experience unnatural behavior of the Pi and a possible unexpected shutdown. Also, make sure to NOT give it 12 volts through the pins as this will instantly burn out the Pi. It will be dead forever.  </p>"},{"location":"old_docs/programming/setup/Setting-up-the-Raspberry-Pi/#enabling-wifi-on-the-pi","title":"Enabling WiFi on the Pi","text":"<p>First you need to edit the blacklist file. Use <code>sudo nano /etc/modprode.d/raspi-blacklist.conf</code>. Make sure your file system is set to read and write. For this use <code>sudo mount -o rw, remount /</code>. After you have opened the file, comment out every line of code by typing a <code>#</code> at the beginning of every line. After that is done, use Ctrl+X to exit. When it asks, press <code>y</code>, and press enter. After you are in the CLI, reboot the Pi by typing <code>sudo reboot</code></p>"},{"location":"old_docs/programming/setup/Setting-up-the-Raspberry-Pi/#connecting-the-pixy","title":"Connecting the Pixy","text":"<p>Even simpler, just take the USB Micro-B to USB-A cable that came bundled with the Pixy2Cam and plug it in to one of the USB ports on the Raspberry Pi. You will need to install some other software to make it actually have an image feed working and things like that which will be talked about later in this guide. </p>"},{"location":"old_docs/programming/setup/Setting-up-the-Raspberry-Pi/#software","title":"Software","text":"<p>Setting up the software for the Raspberry Pi is very straightforward. Instructions on how to do that can be found here.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-Raspberry-Pi/#the-raspberry-pi-should-be-located-at-1025305-a-static-ip-if-it-isnt-fix-that","title":"The Raspberry Pi should be located at 10.25.30.5, a static IP. If it isn't, fix that.","text":"<p>Setting up the Pixy2 on the software side is a little more complicated. Instructions for installing pixymon on linux can be found here. For Mac OS X here, and for Windows click here. This is a direct download link however. Just run the exe and you should be up and running in no time. </p> <p>Instructions for installing libpixyusb on linux can be found here. To build the python code examples, click here for the tutorial.</p>"},{"location":"old_docs/programming/setup/Setting-up-the-Raspberry-Pi/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/setup/Setting-up-the-navX-library/","title":"Setting up the navX library","text":"<p>https://pdocs.kauailabs.com/navx-mxp/software/roborio-libraries/java/</p>"},{"location":"old_docs/programming/setup/Setting-up-the-navX-library/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/setup/Setting-up-version-control/","title":"Setting up VCS","text":"<p>We use version control software to manage and store our robot code. GitHub is a cloud version control system where we store our code and documentation. Everyone on the team can download, edit, and upload code here. It's indescribably helpful to also have companion software on your computer, which downloads and uploads code automatically to make editing with VS Code more convenient.</p>"},{"location":"old_docs/programming/setup/Setting-up-version-control/#setting-up-github","title":"Setting up GitHub","text":"<p>Before you begin, create a GitHub account. Use whatever email or name, it really doesn't matter too much. Just keep it school-appropriate.</p> <p>Find out who has admin access to the team's GitHub and ask to join. You can't do anything programming-related without being a part of the Team2530 Organization. You need to be a part of it to edit code or make documentation.</p> <p>While they get on that, you can set up your version control software of choice.</p>"},{"location":"old_docs/programming/setup/Setting-up-version-control/#setting-up-a-companion-program-on-a-windows-macos-or-linux-computer-recommended","title":"Setting up a companion program on a Windows, macOS, or Linux computer (recommended)","text":"<p>There are multiple different GitHub companion programs available, and it shouldn't matter which one you use. However, beginners should use GitKraken, since the team is the best acquainted with it.</p>"},{"location":"old_docs/programming/setup/Setting-up-version-control/#gitkraken","title":"GitKraken","text":"<p>GitKraken is a third-party software offered by Axosoft. Although there are many premium features, there are many useful integrations that are offered for free.</p> <ul> <li>If it's not already installed, download it at their website and run the installer.</li> <li>If it is already installed, go to File &gt; Sign into a Different Account.</li> <li>Click \"Sign in with Github\". (Make sure you're actually signed in to GitHub on your browser first.)</li> <li>A webpage will open requesting access to your GitHub account. Click \"Authenticate\".</li> <li>When the authentication is finished, the page will show a success message.</li> </ul> <p>You're not done! You need to clone (download) the robot code to your computer in order to edit it on VS Code. (You'll need to be a part of the Team2530 Organization first.)</p> <ul> <li>Go to File &gt; Clone Repo and select \"Github.com\".</li> <li>Under \"Where to clone to\", click the Browse button and select a location on your computer. (It doesn't matter where -- though it might be a good idea to put it somewhere you'll remember.)</li> <li>Under \"Repository to clone\", select \"RobotCodeYYYY\" (where \"YYYY\" is the current season.)</li> <li>Hit \"Clone the repo!\"</li> </ul>"},{"location":"old_docs/programming/setup/Setting-up-version-control/#github-desktop","title":"GitHub Desktop","text":"<p>GitHub Desktop is a first-party software from GitHub Inc. itself. It's essentially a simpler version of GitKraken, albeit without some of the integrations.</p> <ul> <li>If it's not already installed, download it at their website and run the installer.</li> <li>If it is already installed, go to File &gt; Options...</li> <li>Click \"Sign out\", then \"Sign in\". (Make sure you're actually signed in to GitHub on your browser first.)</li> <li>A webpage will open requesting access to your GitHub account. Click \"Authenticate\".</li> <li>You should be automatically redirected back to GitHub Desktop.</li> </ul> <p>You're not done! You need to clone (download) the robot code to your computer in order to edit it on VS Code. (You'll need to be a part of the Team2530 Organization first.)</p> <ul> <li>Go to File &gt; Clone repository...</li> <li>Select \"Team2530/RobotCodeYYYY\" (where \"YYYY\" is the current season) from the list that appears.</li> <li>Under \"Local path\", click the Choose button and select a location on your computer. (It doesn't matter where -- though it might be a good idea to put it somewhere you'll remember.)</li> <li>Hit the Clone button!</li> </ul>"},{"location":"old_docs/programming/setup/Setting-up-version-control/#git-extension-for-vs-code","title":"Git Extension for VS Code","text":"<p>This is the most convenient method, but it may require some knowledge of Git commands. The VS Code extension is included with the WPILib package you installed earlier, so if Git is installed on your computer, you should be able to start using it right away. (If Git isn't installed, a notification should appear that prompts you to download it.) Controls are accessible via the Source Control tab on the left toolbar of VS Code.</p>"},{"location":"old_docs/programming/setup/Setting-up-version-control/#using-the-source-control-tab-on-the-web-version-not-recommended","title":"Using the Source Control tab on the web version (not recommended)","text":"<p>If you're using the web version of VS Code on a Chromebook or another device, you can simply use the Source Control tab on the left side of the screen. Since it's directly integrated with GitHub, you should be able to use it without any setup.</p>"},{"location":"old_docs/programming/setup/Setting-up-version-control/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/vision/PhotonVision/","title":"PhotonVision","text":""},{"location":"old_docs/programming/vision/PhotonVision/#installing-photonvision","title":"Installing PhotonVision","text":"<p>[PhotonVision] PhotonVision</p>"},{"location":"old_docs/programming/vision/PhotonVision/#calibrating-the-limelight-for-apriltags","title":"Calibrating the LimeLight for AprilTags","text":"<p>After downloading the software, connect the LimeLight to the robot and turn it on. Run an IP scan with AngryIPScanner to locate the LimeLight across the network. It should be on <code>10.te.am.XX</code> (So, 10.25.30.XX for us), look for it once the IP scan has complete. (It will be named something like photonvision.local). </p> <p>Put the IP into your search bar, and see if the photonvision dashboard pops up.</p> <p></p> <p>It may not identify AprilTags (in 3D mode) quite yet as you will need to calibrate PhotonVision to do so. Navigate to the <code>Cameras</code> tab on PhotonVision and scroll to where it says \"Download Target\". Print it out with 100% normal scale (It should look like a chess board). Use <code>Start Calibration</code> and observe as the camera draws colored lines on the sheet. It has to be very flat for good identification, so use a flat board when calibrating. Follow the instructions that it gives you and use the <code>Take Snapshot</code> button to take multiple pictures for calibration. Use the <code>Save</code> button when complete. It should now be able to track AprilTags in 3D!</p>"},{"location":"old_docs/programming/vision/PhotonVision/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/vision/Programming-the-Limelight/","title":"Programming the limelight","text":"<p>The Limelight is a highly capable camera. It can be used as a general-purpose drive cam and track apriltags or reflective tape.</p> <p></p> <p>The official Limelight documentation can be found here.</p> <p>Programming The LimeLight</p> <p>Some other quick links (must be connected to use):</p> <ul> <li>Config panel</li> <li>Camera view</li> </ul>"},{"location":"old_docs/programming/vision/Programming-the-Limelight/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/programming/vision/What-we-Have-Learned-From-Camera-and-Object-Recognition/","title":"What we have learned from camera and object recognition","text":"<p>The main objective for the 2019 season in terms of object recognition is to track lines inside the field and align the robot with that line. The two cameras that will be compared are the Microsoft LifeCam HD3000 and the Charmedlabs Pixy2 camera. Both Pros and Cons will be discussed below.</p>"},{"location":"old_docs/programming/vision/What-we-Have-Learned-From-Camera-and-Object-Recognition/#pixy2","title":"Pixy2","text":"<pre><code>  Pros:\n     * Really easy to setup\n     * Mostly accurate without much tuning\n     * Low power usage\n  Cons:\n     * Expensive compared to most of the USB Cameras on the market\n     * Very limited in functionality\n     * You are limited to the code that the manufacturer provides\n     * limited mounting options\n</code></pre>"},{"location":"old_docs/programming/vision/What-we-Have-Learned-From-Camera-and-Object-Recognition/#lifecam-hd3000","title":"LifeCam HD3000","text":"<pre><code> Pros:\n    * Very affordable compared to the Pixy2 at just $25 compared to the Pixy2 at $60 \n    * Very versatile\n    * Works with OpenCV \n    * If you can code it, the camera does it\n    * Generally more accurate\n Cons\"\n    * It's a big hassle to setup OpenCV\n    * A lot of work has to be done to get the tuning right\n    * You'll need to develop some workarounds to integrate multiple computer languages together\n</code></pre> <p>In the end, if you are willing to spend the extra time to get OpenCV working with the LifeCam, that would be the way to go. If you are in a time crunch, then go with the Pixy2. It will save you a lot of time when setting it up, but it won't be as accurate and you don't get a lot of customization.</p>"},{"location":"old_docs/programming/vision/What-we-Have-Learned-From-Camera-and-Object-Recognition/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/","title":"How to create pages","text":"<ol> <li>Go to the team documentation repository.</li> <li>Press the '.' key on your keyboard. This will open github.dev.</li> <li>Add a new file called pagename.md</li> <li>Add content to the file<ul> <li>The file is a markdown file. You can read about markdown here: https://help.github.com/articles/basic-writing-and-formatting-syntax</li> <li>You should include a title at the start, like so: <pre><code># My Title\nSome content.\n![an image](assets/logo.svg)\n</code></pre></li> <li>You should split the document into multiple sections</li> </ul> </li> <li>Commit and push your code to github. The documentation repository is generally an exception to the branching rules, so feel free to push to main instead of making a pull request.</li> </ol>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#using-admonitions","title":"Using Admonitions","text":"<p>This documentation site supports the admonitions plugin. This allows for easy creation of alert boxes.</p> <p>For example, this code: <pre><code>!!! note\n    Hello, world\n</code></pre></p> <p>Creates this:</p> <p>Note</p> <p>Hello, world</p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#supported-types","title":"Supported types","text":"<ul> <li>note</li> <li>abstract</li> <li>info</li> <li>tip</li> <li>success</li> <li>question</li> <li>warning</li> <li>failure</li> <li>danger</li> <li>bug</li> <li>example</li> <li>quote</li> </ul>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#changing-the-admonition-title","title":"Changing the admonition title","text":"<p>You can change the admonition title by adding a string literal after the type of admonition.</p> MarkdownResult Adding a title<pre><code>!!! note \"Hello, world\"\n    Hello, world\n</code></pre> <p>Hello, world</p> <p>Hello, world</p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#collapsible","title":"Collapsible","text":"<p>Another notable feature of admonitions is the support for collapsable alerts. This can be achieved by replacing the exclamation points with question marks.</p> MarkdownResult <pre><code>??? note\n    Hello, world\n</code></pre> Note <p>Hello, world</p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#adding-code","title":"Adding code","text":"<p>Adding blocks of code to documentation is very simple. All you need to do is add something like this in the markdown file: <pre><code>```py\nprint('hello world')\n```\n</code></pre></p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#adding-a-title-to-the-code","title":"Adding a title to the code","text":"<p>Sometimes you may want to add a file name or some other title to a block of code. This is possible using the title argument:</p> MarkdownResult <pre><code>```py title=\"Hello, world\"\nprint(\"hello world\")\nprint(\"5 10 15 20\")\nprint(\"inconceivable\")\n```\n</code></pre> Hello, world<pre><code>print(\"hello world\")\nprint(\"5 10 15 20\")\nprint(\"inconceivable\")\n</code></pre>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#highlighting-specific-lines-of-code","title":"Highlighting specific lines of code","text":"<p>You can highlight specific lines using <code>hl_lines=[...]</code></p> MarkdownResult <pre><code>```py hl_lines=\"2\"\nprint(\"hello world\")\nprint(\"5 10 15 20\")\nprint(\"inconceivable\")\n```\n</code></pre> <pre><code>print(\"hello world\")\nprint(\"5 10 15 20\")\nprint(\"inconceivable\")\n</code></pre>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#adding-images","title":"Adding images","text":"<p>You can add images to documentation with the following syntax: <pre><code>![image caption](path/to/image)\n</code></pre></p> <p>All images should be stored in the folder <code>docs/assets</code> for organization purposes. Also, it is better if you download any images you use and put them in this repository than link to somewhere else on the internet.</p> <p>The following code displays the image below: <pre><code>![image caption](../assets/random-image.jpg)\n</code></pre> </p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#adding-diagrams","title":"Adding diagrams","text":"<p>Tricky stuff ahead</p> <p>Adding diagrams can be difficult, and only experienced markdown users should attempt to do it. If you don't know a lot about markdown, it is way easier to just insert an image instead.</p> <p>This documentation site supports rendering of MermaidJS diagrams. You can read more about it and see some examples here: https://squidfunk.github.io/mkdocs-material/reference/diagrams/.</p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#math","title":"Math","text":"<p>It is possible to insert math that is rendered properly on the page, but it may not be properly configured for this site. For more information, see the official material for mkdocs page on the topic.</p>"},{"location":"old_docs/writing_documentation/How-to-create-pages/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"old_docs/writing_documentation/notes/","title":"Notes for writing documentation","text":""},{"location":"old_docs/writing_documentation/notes/#alertshttpssquidfunkgithubiomkdocs-materialreferenceadmonitionsusage","title":"(Alerts)[https://squidfunk.github.io/mkdocs-material/reference/admonitions/#usage]","text":""},{"location":"old_docs/writing_documentation/notes/#content-tabshttpssquidfunkgithubiomkdocs-materialreferencecontent-tabsusage","title":"(Content Tabs)[https://squidfunk.github.io/mkdocs-material/reference/content-tabs/#usage]","text":""},{"location":"old_docs/writing_documentation/notes/#code-blockshttpssquidfunkgithubiomkdocs-materialreferencecode-blocksusage","title":"(Code Blocks)[https://squidfunk.github.io/mkdocs-material/reference/code-blocks/#usage]","text":""},{"location":"old_docs/writing_documentation/notes/#data-tableshttpssquidfunkgithubiomkdocs-materialreferencedata-tablesusage","title":"(Data tables)[https://squidfunk.github.io/mkdocs-material/reference/data-tables/#usage]","text":""},{"location":"old_docs/writing_documentation/notes/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/","title":"Wiki","text":"<p>Welcome to the Team Wiki. This section (and the others) are all made to be edited by team members, so don't hesitate to fix mistakes or add new information to it.</p>"},{"location":"wiki/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/8020/","title":"80/20","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>An aluminum alloy.</p> <p></p>"},{"location":"wiki/8020/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/advantagekit/","title":"AdvantageKit","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>AdvantageKit is a logging, telemetry, and replay framework developed by Team 6328. AdvantageKit enables log replay, where the full state of the robot code can be replayed in simulation based on a log file - https://docs.advantagekit.org/</p>"},{"location":"wiki/advantagekit/#links","title":"Links","text":"<ul> <li>https://docs.advantagekit.org/</li> </ul>"},{"location":"wiki/advantagekit/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/advantagescope/","title":"AdvantageScope","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>AdvantageScope is a robot diagnostics, log review/analysis, and data visualization application for FIRST teams developed by Team 6328. It reads logs in WPILOG, DS log, Hoot (CTRE), and RLOG file formats, plus live robot data viewing using NT4 or RLOG streaming. AdvantageScope can be used with any WPILib project, but is also optimized for use with our AdvantageKit log replay framework. Note that AdvantageKit is not required to use AdvantageScope. - https://docs.advantagescope.org/</p>"},{"location":"wiki/advantagescope/#links","title":"Links","text":"<ul> <li>https://docs.advantagescope.org/</li> </ul>"},{"location":"wiki/advantagescope/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/apache/","title":"Apache","text":"<p>A software company.</p>"},{"location":"wiki/apache/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/apriltag/","title":"Apriltag","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Apriltags are square qr-code-like images that encode a very small amount of information. They are sometimes placed in FRC fields, and can be used for pose-estimation to figure out where the robot is relative to the tags.</p>"},{"location":"wiki/apriltag/#families","title":"Families","text":"<p>There are different kinds of 'families' of apriltags. Here is a chart from the FIRST docs that shows a few of the most common families:</p> <p></p> <p>The <code>36h11</code> family was used in 2024 and 2025, and is the family most likely to be used in future years.</p>"},{"location":"wiki/apriltag/#uses","title":"Uses","text":"<ul> <li>Pose estimation</li> </ul>"},{"location":"wiki/apriltag/#links","title":"Links","text":"<ul> <li>https://docs.limelightvision.io/docs/docs-limelight/pipeline-apriltag/apriltags</li> <li>For FTC, https://ftc-docs.firstinspires.org/en/latest/apriltag/vision_portal/apriltag_intro/apriltag-intro.html</li> <li>https://community.firstinspires.org/2025-apriltag-information (2025 apriltag info)</li> <li>Apriltag Images and User Guide: https://firstfrc.blob.core.windows.net/frc2024/FieldAssets/Apriltag_Images_and_User_Guide.pdf</li> </ul>"},{"location":"wiki/apriltag/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/arm/","title":"Arm","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>An arm is a mechanism with multiple links that rotate around a joint.</p>"},{"location":"wiki/arm/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/assembly/","title":"Assembly","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Disambiguation</p> <p>Assembly can mean a different thing in Programming, this page is about the CAD term.</p> <p>In Onshape, an assembly can contain sub-assemblies, part studios, different types of mates.</p> <p>Assemblies are for positioning and establishing movement between parts. The main function for this \"mates\", which establish the degrees of freedom between parts. Parts can move freely in an assembly before their position/movement is defined with mates. - https://frcdesign.org/learning-course/stage0/0C/document-navigation/#__tabbed_1_3</p>"},{"location":"wiki/assembly/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/battery/","title":"Battery","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The power supply for an FRC robot is a single 12V 18Ah battery. The batteries used for FRC are sealed lead acid batteries capable of meeting the high current demands of an FRC robot. For more information, see the Datasheets for the MK ES17-12 and nersys NP18-12. - https://frcdocs.wpi.edu/en/2020/docs/getting-started/getting-started-frc-control-system/control-system-hardware.html#robot-battery</p>"},{"location":"wiki/battery/#links","title":"Links","text":"<ul> <li>https://frcdocs.wpi.edu/en/2020/docs/getting-started/getting-started-frc-control-system/control-system-hardware.html#robot-battery</li> <li>https://team1640.com/wiki/index.php/Battery_Management</li> </ul>"},{"location":"wiki/battery/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/bearing/","title":"Bearing","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>\"Bearings allow shafts to spin independently of plates and/or things to spin independently of shafts. Standard hex shafts use 1/2\" hex bearings, while rounded hex shafts can use round bearings for easier assembly.\" - https://frcdesign.org/learning-course/stage1/1B/shafts-bearings/</p>"},{"location":"wiki/bearing/#further-reading","title":"Further Reading","text":"<ul> <li>https://frcdesign.org/learning-course/stage1/1B/shafts-bearings/#bearings</li> </ul>"},{"location":"wiki/bearing/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/blinky-light/","title":"Blinky Light","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>(Also knows as the \"Robot Signal Light\" or just \"RSL\")</p> <p></p> <p>The Robot Signal Light (RSL) is required to be either Allen-Bradley 855PB-B12ME522 or AndyMark am-3583. It is directly controlled by the roboRIO and will flash when enabled and stay solid while disabled. - https://docs.wpilib.org/en/stable/docs/controls-overviews/control-system-hardware.html#robot-signal-light</p>"},{"location":"wiki/blinky-light/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/box-tube/","title":"Box Tube","text":"<p>It is a box, and it is a tube.</p> <p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/box-tube/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/bumpers/","title":"Bumpers","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/bumpers/#purpose","title":"Purpose","text":"<p>The purpose of bumpers in FRC is to:</p> <ol> <li>provide consistent well-defined protection for robots during match play,</li> <li>identify alliance, and</li> <li>identify the team.</li> </ol>"},{"location":"wiki/bumpers/#sources","title":"Sources","text":"<ul> <li>FRC Bumper Guide</li> </ul>"},{"location":"wiki/bumpers/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/bushing/","title":"Bushing","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>\"Bushings are a cheap and low friction alternative to bearings and are used with metal shafts such as shoulder bolts, hex shafts, and round tube, mainly to save space. They are made out of a self-lubricating material such as bronze or acetal/delrin and typically used in applications with relatively low RPM, such as for pivots and linkage joints.\" - https://frcdesign.org/learning-course/stage1/1B/shafts-bearings/#bushings</p>"},{"location":"wiki/bushing/#further-reading","title":"Further Reading","text":"<ul> <li>https://frcdesign.org/learning-course/stage1/1B/shafts-bearings/#bushings</li> </ul>"},{"location":"wiki/bushing/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/can/","title":"CAN Bus","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/can/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/cancoder/","title":"CANCoder","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A CANCoder is a rotary magnetic encoder.</p>"},{"location":"wiki/cancoder/#links","title":"Links","text":"<ul> <li>https://store.ctr-electronics.com/products/cancoder</li> </ul>"},{"location":"wiki/cancoder/#further-reading","title":"Further Reading","text":"<ul> <li>https://en.wikipedia.org/wiki/Rotary_encoder</li> </ul>"},{"location":"wiki/cancoder/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/center-of-gravity/","title":"Center of Gravity","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Center of Gravity (commonly referred to as CG) is the balancing point of an object.</p>"},{"location":"wiki/center-of-gravity/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/charged-up/","title":"Charged Up","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The 2022-23 FRC game.</p>"},{"location":"wiki/charged-up/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/cli/","title":"CLI","text":"<p>CLI stands for Command-Line Interface. As its name imples, it is a system that allows humans to interface with computer programs by issuing commands.</p>","tags":["Programming"]},{"location":"wiki/cli/#flags","title":"Flags","text":"<p>Command line interfaces typically have options that you can set, typically called flags.</p> <p>Most linux and windows commands have <code>--help</code> flags that allow you to see the full list of available CLI flags. Here is an example for the program <code>mkdir</code> (make directory), a program in the GNU Coreutils that allows users to create folders.</p> $ mkdir --help<pre><code>Usage: mkdir [OPTION]... DIRECTORY...\nCreate the DIRECTORY(ies), if they do not already exist.\n\nMandatory arguments to long options are mandatory for short options too.\n  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask\n  -p, --parents     no error if existing, make parent directories as needed\n  -v, --verbose     print a message for each created directory\n  -Z                   set SELinux security context of each created directory\n                         to the default type\n      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\n                         or SMACK security context to CTX\n      --help     display this help and exit\n      --version  output version information and exit\n\nGNU coreutils online help: &lt;https://www.gnu.org/software/coreutils/&gt;\nFull documentation &lt;https://www.gnu.org/software/coreutils/mkdir&gt;\nor available locally via: info '(coreutils) mkdir invocation'\n</code></pre> <p>As you can see, the <code>mkdir</code> command has seven unique flags. There are long form flags, e.g. <code>--help</code>, <code>--version</code> and also shorter single-character flags such as <code>-h</code> and <code>-p</code>.</p>","tags":["Programming"]},{"location":"wiki/cli/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/climber/","title":"Climber","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A climber is a robot subsystem that climbs something, usually for the endgame period of a match.</p>"},{"location":"wiki/climber/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/crescendo/","title":"Crescendo","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The 2023-24 FRC game. Our robot for this year was Riffs of Insanity.</p>"},{"location":"wiki/crescendo/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/ctr/","title":"CTR Electronics","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/ctr/#further-reading","title":"Further Reading","text":"<ul> <li>https://store.ctr-electronics.com/</li> </ul>"},{"location":"wiki/ctr/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/degrees-of-freedom/","title":"Degrees of Freedom","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Degrees of freedom (DOF) refers to the number of quantites that can vary independantly.</p> <p>For example, a point on a plane has 2 degrees of freedom as the X and Y components of its position are independant.</p> <p>This term is most commonly used in FRC when discussing arms, manipulators and other scoring devices.</p>"},{"location":"wiki/degrees-of-freedom/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/discord/","title":"Discord","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Discord is an online messaging app that our team uses to communicate.</p> <p>Our team uses a Discord server as our primary method of communication. It's important for all members to be in it because communication is important. Be sure to check it daily! (Better yet, set up push notifications on your phone!)</p>"},{"location":"wiki/discord/#setting-up-discord","title":"Setting up Discord","text":"<p>When you finish the steps to join, you should see our \"square root of -1\" logo on the left side of the screen.</p>"},{"location":"wiki/discord/#join-using-the-web-version","title":"Join using the web version","text":"<ol> <li>Go to https://discord.com and sign in or create an account.</li> <li>Ask a team member or mentor for a link or code to join the server.</li> </ol>"},{"location":"wiki/discord/#join-using-the-desktop-version","title":"Join using the desktop version","text":"<ol> <li>Open Discord on your computer and sign in or create an account.</li> <li>Click the + button on the left side of the screen. At the bottom of the popup that appears, click \"Join a server.\"</li> <li>Ask a team member or mentor for a code to join the server.</li> </ol>"},{"location":"wiki/discord/#muting-channels","title":"Muting Channels","text":"<p>You can mute channels that you do not want to receive notifications from by right clicking on the channel and then selecting \"Mute Channel\" and selecting how long you want the channel to be muted for. The same can be done for entire servers.</p> <p></p>"},{"location":"wiki/discord/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/drawing/","title":"Drawing","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A Drawing in Onshape is a type of tab that is made by CADders for a specific part or assembly to be machined.</p>"},{"location":"wiki/drawing/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/drive-train/","title":"Drive Train","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Add the presentation slides</p> <p>We have an excellent presentation on the different drivetrains used in FRC, and it would be great to add it here.</p>"},{"location":"wiki/drive-train/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/dyneema-rope/","title":"Dyneema Rope","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A very strong synthetic kind of rope.</p>"},{"location":"wiki/dyneema-rope/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/epa/","title":"EPA","text":"<p>EPA (Expected points added) is a statistic developed by Statbotics used to predict how many points a robot is expected to add to a given alliance. It is used eveywhere in our scouting subteam for a baseline of how a team will perform if we haven't seen any of their matches.</p> <p>You will almost certainly never need to calculate it by hand or implement it with code. Statbotics has an API that allows easy access to this information.</p>"},{"location":"wiki/epa/#k-parameter","title":"K-parameter","text":"<p>The K-parameter is a variable used to control how much a team's EPA changes for a given match. Larger values of \\(K\\) will result in bigger EPA changes for every match.</p> <p>According to the statbotics blog post, it is calculated like this:</p> \\[ K = \\begin{cases}            0.5                     &amp; N \\leq 6 \\\\           0.5 - \\frac{1}{30}(N-6) &amp; 6 \\lt N \\leq 12 \\\\           0.3                     &amp; N \\gt 12         \\end{cases} \\] <p>Where \\(N\\) is the number of matches that the team has played.</p> <p></p> <p>As you can see, after 6 matches \\(K\\) will decrease linearly until it is equal to \\(0.3\\).</p>"},{"location":"wiki/epa/#epa-changes","title":"EPA Changes","text":"<p>EPA Changes are something you will likely never need to calculate manually, but it can be interesting to see how the changes are calculated.</p> <p>This is the formula for EPA changes:</p> \\[ \\Delta EPA = K \\times \\frac{1}{1+M} \\times ((\\text{Red Score} - \\text{Red EPA}) - M \\times (\\text{Blue Score} - \\text{Blue EPA})) \\] <p>Where \\(K\\) is the K parameter, and M is the margin parameter.</p> <p>\\(M\\) can be calculated like this:</p> \\[ M = \\begin{cases}         0                             &amp; N \\le 12 \\\\         \\frac{1}{24} \\times (N - 12)  &amp; 12 \\lt N \\le 36 \\\\         1                             &amp; N \\gt 36     \\end{cases} \\] <p>(Where \\(N\\) is still the number of matches the team has played)</p>"},{"location":"wiki/epa/#component-epas","title":"Component EPAs","text":"<p>Since 2016, FRC games have been played with three phases: autonomous, teleoperated, and endgame. OPR can be separated into auto, teleop, and endgame components, and so naturally, we seek to do the same for EPA.  - https://www.statbotics.io/blog/epa#component-epa</p> <p>Here are the formulas used to calculate changes to component EPAs:</p> \\[ \\Delta \\text{Auto EPA} = K \\times (\\text{Auto Score} - \\text{Auto EPA}) \\] \\[ \\Delta \\text{Endgame EPA} = K \\times (\\text{Endgame Score} - \\text{Endgame EPA}) \\] <p>TeleOP EPA is not calculated in this way because it has more alliance interaction, so it is calculated like this:</p> \\[ \\text{TeleOP EPA} = \\text{EPA} - \\text{Auto EPA} - \\text{Endgame EPA} \\]"},{"location":"wiki/epa/#match-predictions","title":"Match predictions","text":"<p>It is possible to predict the outcome of matches purely based on the EPA of each team. </p>"},{"location":"wiki/epa/#simple-method","title":"Simple method","text":"<p>The simplest method for predicting matches it to lookup the EPA of each team on both alliances and then add them together. The alliance with a greater combined EPA is more likely to win.</p>"},{"location":"wiki/epa/#further-reading-sources","title":"Further reading &amp; Sources","text":"<ul> <li>https://www.statbotics.io/blog/epa</li> <li>https://github.com/avgupta456/statbotics/tree/master/backend/src/data/epa</li> </ul>"},{"location":"wiki/epa/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/ethernet/","title":"Ethernet","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/ethernet/#further-reading","title":"Further Reading","text":"<ul> <li>https://en.wikipedia.org/wiki/Ethernet</li> </ul>"},{"location":"wiki/ethernet/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/extrude/","title":"Extrude","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information. This page could really use an animated GIF that shows the process of extruding a surface.</p> <p>Add depth to a selected region or planar face along a straight path. Create a new part or surface or modify an existing one by adding or removing material, or intersecting parts in its path. Use Extrude to create parts, surfaces, or thin extrudes. - https://cad.onshape.com/help/Content/extrude.htm</p> <p>The keyboard shortcut for extruding a surface is Shift+E.</p>"},{"location":"wiki/extrude/#sources","title":"Sources","text":"<ul> <li>https://cad.onshape.com/help/Content/extrude.htm</li> </ul>"},{"location":"wiki/extrude/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/eye-bolt/","title":"Eye bolt","text":"<p>An eye bolt is a bolt with a loop on one end.</p> <p></p>"},{"location":"wiki/eye-bolt/#sources","title":"Sources","text":"<ul> <li>Image was taken from https://wiki.dtonline.org</li> </ul>"},{"location":"wiki/eye-bolt/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/falcon-500/","title":"Falcon 500","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A brushless motor with an integrated motor controller and high-resolution encoder.</p> <p></p>"},{"location":"wiki/falcon-500/#links","title":"Links","text":"<ul> <li>https://store.ctr-electronics.com/products/falcon-500-powered-by-talon-fx</li> <li>https://www.andymark.com/products/falcon-500</li> <li>https://wiki.wafflesrobotics.com/Design/Falcon-500</li> <li>Image is from https://www.vexrobotics.com/pro/falcon-500</li> </ul>"},{"location":"wiki/falcon-500/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/feature-studio/","title":"Feature Studio","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A Feature Studio is a tab containing FeatureScript, a programming language used to define your own custom features in Onshape. - https://cad.onshape.com/help/Content/featurestudios.htm</p>"},{"location":"wiki/feature-studio/#sources","title":"Sources","text":"<ul> <li>https://cad.onshape.com/help/Content/featurestudios.htm</li> </ul>"},{"location":"wiki/feature-studio/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/featurescript/","title":"FeatureScript","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>FeatureScript is a [] programming language designed by Onshape for building and working with 3D parametric models. The language is built into Onshape from the ground up, providing the foundation of Part Studio modeling, including robust geometric references, powerful parametric tools, and a type system with types built for math in three dimensions. - https://cad.onshape.com/FsDoc/</p>"},{"location":"wiki/featurescript/#example","title":"Example","text":"<p>This is an example featurescript that inserts a new sketch reference of an Amongus character.</p> <pre><code>FeatureScript 2656;\nimport(path : \"onshape/std/common.fs\", version : \"2656.0\");\n\nimport(path : \"212d85f6b078d782c08c8743\", version : \"00c6b06bc73a7cb4d1600b0c\");\n\n\nannotation { \"Feature Type Name\" : \"Amongus\", \"Feature Type Description\" : \"Creates an amongus\" }\nexport const myFeature = defineFeature(function(context is Context, id is Id, definition is map)\n    precondition\n    {\n        annotation { \"Name\" : \"Targets\", \"Filter\" : EntityType.VERTEX }\n        definition.targets is Query;\n    }\n    {\n        // Define the function's action\n        var amongusSketch = newSketch(context, id + \"sketch1\", {\n                \"sketchPlane\" : qCreatedBy(makeId(\"Top\"), EntityType.FACE)\n            });\n\n\n        skImage(amongusSketch, \"amongus\", {\n                    \"blobInfo\" : BLOB_DATA,\n                    \"firstCorner\" : vector(0, 0) * inch,\n                    \"secondCorner\" : vector(1, 1) * inch\n                });\n\n\n        var vertices = evaluateQuery(context, definition.targets);\n\n\n        // Iterate over each vertex and place the image\n        for (var i = 0; i &lt; size(vertices); i += 1)\n        {\n            var vertex = vertices[i];\n            var vertexPosition = evVertexPoint(context, {\n                    \"vertex\" : vertex\n                });\n\n\n            // Create the image at the vertex position\n            skImage(amongusSketch, join([\"amongus-\", toString(vertexPosition[0]), \"-\", toString(vertexPosition[1])]).replace(\" \", \"\"), {\n                        \"blobInfo\" : BLOB_DATA,\n                        \"firstCorner\" : vector(vertexPosition[0], vertexPosition[1]), // - vector(0.5 * inch, 0.5 * inch, 0), // Adjust to center the image\n                        \"secondCorner\" : vector(vertexPosition[0] + 0.5 * inch, vertexPosition[1] + 0.5 * inch) // + vector(0.5 * inch, 0.5 * inch, 0) // Adjust to center the image\n                    });\n        }\n\n\n\n\n        // Create sketch entities here\n        skSolve(amongusSketch);\n\n\n\n    });\n</code></pre> <p></p>"},{"location":"wiki/featurescript/#sources","title":"Sources","text":"<ul> <li>https://cad.onshape.com/FsDoc/</li> <li>https://www.onshape.com/en/blog/standardization-automation-complex-design-cad-featurescript</li> </ul>"},{"location":"wiki/featurescript/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/figma/","title":"Figma","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Figma is a graphic design tool used by our graphics subteam.</p> <p>https://www.figma.com/</p>"},{"location":"wiki/figma/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/first/","title":"FIRST","text":""},{"location":"wiki/first/#name","title":"Name","text":"<p>FIRST is short for \"For Inspiration and Recognition of Science and Technology.</p>"},{"location":"wiki/first/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/fll/","title":"FLL","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>FLL stands for FIRST Lego League.</p>"},{"location":"wiki/fll/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/frc/","title":"FRC","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>FRC stands for FIRST Robotics Competition.</p>"},{"location":"wiki/frc/#games","title":"Games","text":"<p>This table was constructed with data from https://frc-events.firstinspires.org/seasons.</p> Year Game 1992 Maize Craze 1993 Rug Rage 1994 Tower Power 1995 Ramp N Roll 1996 Hexagon Havoc 1997 Toroid Terror 1998 Ladder Logic 1999 Double Trouble 2000 Co-opertition FIRST 2001 Diabolical Dynamics 2002 Zone Zeal 2003 Stack Attack 2004 Frenzy 2005 Triple Play 2006 Aim High 2007 Rack N Roll 2008 Overdrive 2009 Lunacy 2010 Breakaway 2011 Logo Motion 2012 Rebound Rumble 2013 Ultimate Ascent 2014 Aerial Assist 2015 Recycle Rush 2016 Stronghold 2017 Steamworks 2018 Power Up 2019 Destination: Deep Space 2020 Infinite Recharge 2021 Infinite Recharge 2022 Rapid React 2023 Charged Up 2024 Crescendo 2025 Reefscape"},{"location":"wiki/frc/#links","title":"Links","text":"<ul> <li>List of FRC Seasons</li> </ul>"},{"location":"wiki/frc/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/ftc/","title":"FTC","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>FTC stands for FIRST Tech Challenge.</p>"},{"location":"wiki/ftc/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/game-manual/","title":"Game Manual","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/game-manual/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/gears/","title":"Gears","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>\"Gears are mechanical devices with teeth that mesh with each other to transmit motion or power between rotating shafts. They're like wheels with teeth that fit together, allowing them to transfer torque, change speed, and change direction of rotation.\" - https://frcdesign.org/learning-course/stage1/1B/gears/#gear-basics</p>"},{"location":"wiki/gears/#meshing","title":"Meshing","text":""},{"location":"wiki/gears/#further-reading","title":"Further Reading","text":"<ul> <li>https://frcdesign.org/learning-course/stage1/1B/gears/</li> </ul>"},{"location":"wiki/gears/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/git/","title":"Git","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A system for tracking the changes between different versions of code. Think of it like the version history in Google Docs but for code instead of essays.</p>","tags":["Programming"]},{"location":"wiki/git/#further-reading","title":"Further Reading","text":"<ul> <li>https://nfarina.com/post/9868516270/git-is-simpler</li> <li>https://maryrosecook.com/blog/post/git-from-the-inside-out#fn:1</li> </ul>","tags":["Programming"]},{"location":"wiki/git/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/github/","title":"Github","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>GitHub is a website that lets anyone host a Git repository for free online. We use it to store the vast majority of our code.</p>","tags":["Programming"]},{"location":"wiki/github/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/gnu-coreutils/","title":"GNU Coreutils","text":"<p>A common set of programs used on Linux like <code>ls</code>, <code>cd</code>, <code>mkdir</code>, etc.</p>"},{"location":"wiki/gnu-coreutils/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/google-drive/","title":"Google Drive","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Google Drive is a file storage solution that our team uses for many applications.</p>"},{"location":"wiki/google-drive/#layout-of-google-drive","title":"Layout of Google Drive","text":"<p>The top level of the Google Drive is seperated into folders for each FRC season in addition to folders for projects that aren't tied to a specific season such as the team's sponsors, finances and battery testing.</p> <p>In the folder for a given season you will find the game manual and folders for subteams/events/agendas.</p>"},{"location":"wiki/google-drive/#access-control","title":"Access Control","text":"<p>Don't use a school account</p> <p>Make sure that you don't use your school email when being added to the Google Drive. Documents created within RPS cannot be viewed by Google accounts that are not also within RPS.</p>"},{"location":"wiki/google-drive/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/gradle/","title":"Gradle","text":"<p>Gradle is a tool used to simplify the management of all the vendor dependencies we use in our code.</p>","tags":["Programming"]},{"location":"wiki/gradle/#usage","title":"Usage","text":"<p>For the most part, you shouldn't need to interact much with Gradle's command line interface (CLI) or configuration files. WPILib's VSCode extension handles everything for you.</p>","tags":["Programming"]},{"location":"wiki/gradle/#files","title":"Files","text":"","tags":["Programming"]},{"location":"wiki/gradle/#buildgradle","title":"build.gradle","text":"<p>This file is written in a language called Groovy, which is a superset<sup>1</sup> of Java.</p> <p>This document is taken from our 2024 season robot code and has been annotated with explanations of everything. Click on the plus signs to read the annotations.</p> build.gradle<pre><code>plugins /* (1)! */ {\n    id \"java\"\n    id \"edu.wpi.first.GradleRIO\" version \"2024.1.1\" // (2)!\n}\n\njava { // (3)!\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n}\n\ndef ROBOT_MAIN_CLASS = \"frc.robot.Main\" // (4)!\n\n// Define my targets (RoboRIO) and artifacts (deployable files)\n// This is added by GradleRIO's backing project DeployUtils.\ndeploy {\n    targets {\n        roborio(getTargetTypeClass('RoboRIO')) {\n            // Team number is loaded either from the .wpilib/wpilib_preferences.json\n            // or from command line. If not found an exception will be thrown.\n            // You can use getTeamOrDefault(team) instead of getTeamNumber if you\n            // want to store a team number in this file.\n            team = project.frc.getTeamNumber()\n            debug = project.frc.getDebugOrDefault(false)\n\n            artifacts {\n                // First part is artifact name, 2nd is artifact type\n                // getTargetTypeClass is a shortcut to get the class type using a string\n\n                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {\n                }\n\n                // Static files artifact\n                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {\n                    files = project.fileTree('src/main/deploy')\n                    directory = '/home/lvuser/deploy'\n                }\n            }\n        }\n    }\n}\n\ndef deployArtifact = deploy.targets.roborio.artifacts.frcJava\n\n// Set to true to use debug for JNI.\nwpi.java.debugJni = false\n\n// Set this to true to enable desktop support.\ndef includeDesktopSupport = false\n\n// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.\n// Also defines JUnit 5.\ndependencies /* (5)! */ {\n    implementation wpi.java.deps.wpilib()\n    implementation wpi.java.vendor.java()\n\n    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)\n    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)\n\n    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)\n    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)\n\n    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)\n    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)\n    simulationDebug wpi.sim.enableDebug()\n\n    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)\n    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)\n    simulationRelease wpi.sim.enableRelease()\n}\n\ntest {\n    useJUnitPlatform()\n    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'\n}\n\n// Simulation configuration (e.g. environment variables).\nwpi.sim.addGui().defaultEnabled = true\nwpi.sim.addDriverstation()\n\n// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')\n// in order to make them all available at runtime. Also adding the manifest so WPILib\n// knows where to look for our Robot Class.\njar {\n    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }\n    from sourceSets.main.allSource\n    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)\n    duplicatesStrategy = DuplicatesStrategy.INCLUDE\n}\n\n// Configure jar and deploy tasks\ndeployArtifact.jarTask = jar\nwpi.java.configureExecutableTasks(jar)\nwpi.java.configureTestTasks(test)\n\n// Configure string concat to always inline compile\ntasks.withType(JavaCompile) {\n    options.compilerArgs.add '-XDstringConcat=inline'\n}\n</code></pre> <ol> <li>This block, aptly named <code>plugins</code>, lists some Gradle Plugins that the robot code project uses.</li> <li>This line adds the GradleRIO plugin, which is used to simplify the build script.</li> <li>This section can contain settings and options that are part of Java. Right now, it is only being used to set the source (input) and target (output) compatibility to support Java 17.</li> <li>This specifies the main class of our robot code. Please don't ever change this, as doing so will cause build failures.</li> <li>This is typically where a Gradle project would list all of its libraries that it uses. We don't do it this way because of WPILib's VendorDeps system, but we could add things here if we wanted to.</li> </ol>","tags":["Programming"]},{"location":"wiki/gradle/#gradlew-gradlewbat","title":"gradlew, gradlew.bat","text":"<p>These are executable text files written in bash and batch for use on Linux/MacOS and Windows systems, respectively. We don't need to use these when we build our robot code projects because WPILib's VSCode extension does it for us when you ask it to Build your robot code.</p>","tags":["Programming"]},{"location":"wiki/gradle/#settingsgradle","title":"settings.gradle","text":"<p>This is another file written in Groovy that allows you to configure project settings. You shouldn't ever need to use it.</p>","tags":["Programming"]},{"location":"wiki/gradle/#gradlewrapper","title":"gradle/wrapper","text":"<p>This folder contains the jar file for Gradle--the actual code that the <code>gradlew</code> and <code>gradlew.bat</code> runs. There shouldn't ever be a need to modify these manually.</p>","tags":["Programming"]},{"location":"wiki/gradle/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p> <ol> <li> <p>It is a version of the Java programming language with some added features. They look very different though, and the experience of writing them is also different. To learn more about it, check out the official groovy website and documentation.\u00a0\u21a9</p> </li> </ol>","tags":["Programming"]},{"location":"wiki/groovy/","title":"Groovy","text":"<p>Groovy is a superset of the Java programming language written by Apache. The only time you are likely to encounter Groovy in an FRC setting is in Gradle build files.</p>","tags":["Programming"]},{"location":"wiki/groovy/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/gusset/","title":"Gusset","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A gusset is a reinforcement thingy to strengthen the connections between two tubes.</p>"},{"location":"wiki/gusset/#featurescript","title":"Featurescript","text":"<p>There is a Featurescript for generating gussets, contained in the \"Julia's Featurescripts\" collection. You can install it from the official link or use this tutorial which explains the installation process.</p>"},{"location":"wiki/gusset/#how-to-use-the-featurescript","title":"How to use the featurescript","text":"<ol> <li> <p>Start with two box tubes that already have hole features in them.</p> <p></p> </li> <li> <p>Open the featurescript menu and select the Gusset featurescript</p> <p></p> </li> <li> <p>Mess with the settings until they are good</p> <p>You may need to invert the 'thickness' option if the gusset is inside of the tubes.</p> <p></p> </li> <li> <p>Select the holes used by the gusset</p> <p></p> </li> <li> <p>Keep working</p> <p>You will probably want to add screws next.</p> <p></p> </li> </ol>"},{"location":"wiki/gusset/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/ide/","title":"Integrated Development Environment","text":"<p>An IDE (Integrated Development Environment) is software that provides various tools for developing code.</p> <p>Our team uses VSCode.</p>"},{"location":"wiki/ide/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/impact-award/","title":"Impact Award","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/impact-award/#further-reading","title":"Further Reading","text":"<ul> <li>https://www.firstinspires.org/resource-library/frc/first-impact-award-resources</li> </ul>"},{"location":"wiki/impact-award/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/insta360/","title":"Insta360","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>An Insta360 is a 360 camera. We used one on our 2025 Robot, The Shrieking Eel.</p>"},{"location":"wiki/insta360/#links","title":"Links","text":"<ul> <li>https://www.insta360.com/</li> </ul>"},{"location":"wiki/insta360/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/java/","title":"Java","text":"<p>Java is not Javascript</p> <p>The names are similar, but Java is not the same thing as Javascript. Javascript (JS) is the programming language used in websites to provide dynamic logic, while Java is used for our robot code.</p>","tags":["Programming"]},{"location":"wiki/java/#what-is-java","title":"What is Java?","text":"<p>Java is a general-purpose, Object Oriented, bytecode-based programming language.</p> <p>We use Java to develop all of our robot code.</p> <p>Java code requires something called a JVM to run. JVM stands for Java Virtual Machine, and it acts as a machine that understands Java Bytecode (stored in <code>.class</code> files) and does nothing but run that bytecode. To create that bytecode, you need a Java compiler (called <code>javac</code>) that translates the human-readable Java source files (<code>.java</code> files) into Java bytecode files (<code>.class</code> files).</p>","tags":["Programming"]},{"location":"wiki/java/#how-can-i-learn-java","title":"How can I learn Java?","text":"<p>Here are some links to tutorials on basic Java:</p> Tutorial Description W3Schools W3Schools teaches the basics of Java Syntax FRCDocs: Getting Started Explains the basics of programming robots. Team 3255 \"Create a basic driving robot\" Another team wrote this article about how to program a basic robot that drives. This will be hard to follow along with since you don't have any of the hardware, but can still be valuable to read.","tags":["Programming"]},{"location":"wiki/java/#links","title":"Links","text":"<ul> <li>Wikipedia Page</li> </ul>","tags":["Programming"]},{"location":"wiki/java/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/jvm/","title":"Java Virtual Machine","text":"<p>The JVM (Java Virtual Machine) is a program that executes code that has been compiled into Java bytecode. </p>"},{"location":"wiki/jvm/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/kirimoto/","title":"Kiri:Moto","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Kiri moto is a tool that we sometimes use for CNC purposes.</p>"},{"location":"wiki/kirimoto/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<p>You can find a list of all the keyboard shortcuts at https://docs.grid.space/projects/kiri-moto/controls.</p>"},{"location":"wiki/kirimoto/#links","title":"Links","text":"<ul> <li>https://grid.space/kiri/</li> </ul>"},{"location":"wiki/kirimoto/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/kraken-x60/","title":"Kraken x60","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information. It could use a photo.</p> <p>A brushless motor designed for FRC.</p>"},{"location":"wiki/kraken-x60/#links","title":"Links","text":"<ul> <li>https://wcproducts.com/products/kraken</li> <li>https://store.ctr-electronics.com/products/kraken-x60</li> </ul>"},{"location":"wiki/kraken-x60/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/krayon-cad/","title":"Krayon CAD","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Krayon CAD is something in Onshape that is part of MkCAD.</p>"},{"location":"wiki/krayon-cad/#video","title":"Video","text":"<p>This video explains the very basics of Krayon CAD: https://youtu.be/K58C409xSpc?si=phuxiCUP6FtPJHMU.</p>"},{"location":"wiki/krayon-cad/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/limelight/","title":"Limelight","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/limelight/#limelight-4","title":"Limelight 4","text":""},{"location":"wiki/limelight/#limelight-3g","title":"Limelight 3G","text":""},{"location":"wiki/limelight/#limelight-3a","title":"Limelight 3A","text":""},{"location":"wiki/limelight/#limelight-22","title":"Limelight 2/2+","text":""},{"location":"wiki/limelight/#limelight-1","title":"Limelight 1","text":""},{"location":"wiki/limelight/#links","title":"Links","text":"Label Link Main website https://limelightvision.io/ Documentation https://docs.limelightvision.io/ West Coast Products https://wcproducts.com/products/limelight-vision-camera"},{"location":"wiki/limelight/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/linear-pattern/","title":"Linear Pattern","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A linear pattern in Onshape is a feature that duplicates an entity in a linear way.</p> <p></p>"},{"location":"wiki/linear-pattern/#example","title":"Example","text":""},{"location":"wiki/linear-pattern/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/linux/","title":"Linux","text":"<p>An operating system.</p> <p>Robot Code runs on Linux.</p>"},{"location":"wiki/linux/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/main-breaker/","title":"Main Breaker","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p></p> <p>The main breaker is the main on/off switch on the robot.</p> <p>The 120A Main Circuit Breaker serves two roles on the robot: the main robot power switch and a protection device for downstream robot wiring and components. The 120A circuit breaker is wired to the positive terminals of the robot battery and Power Distribution boards. For more information, please see the Cooper Bussmann 18X Series Datasheet (PN: 185120F) - https://docs.wpilib.org/en/stable/docs/controls-overviews/control-system-hardware.html</p>"},{"location":"wiki/main-breaker/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/maven/","title":"Maven","text":"<p>Maven is a build system developed by Apache. It is an alternative to Gradle, but our team does not use it.</p>","tags":["Programming"]},{"location":"wiki/maven/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/maxcomposite/","title":"MAXComposite","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Made of self-reinforced polypropylene</p>"},{"location":"wiki/maxcomposite/#links","title":"Links","text":"<ul> <li>https://www.revrobotics.com/MAXComposite-Sheets/</li> <li>https://docs.revrobotics.com/ion-build-system/structure/maxcomposite</li> </ul>"},{"location":"wiki/maxcomposite/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/maxplanetary-gearbox/","title":"MAXPlanetary Gearbox","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/maxplanetary-gearbox/#links","title":"Links","text":"<ul> <li>https://www.revrobotics.com/maxplanetary-system-kit/</li> </ul>"},{"location":"wiki/maxplanetary-gearbox/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/maxtube/","title":"MAXTube","text":"<p>MAXTube is a kind of Box Tube.</p> <p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/maxtube/#links","title":"Links","text":"<ul> <li>https://www.revrobotics.com/ion/structure/maxtube/</li> </ul>"},{"location":"wiki/maxtube/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/mkcad/","title":"MKCad","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>MKCad is an Onshape plugin that contains a large library of parts that are often useful in FRC. - https://frcdesign.org/learning-course/stage0/0B/MKCad/</p>"},{"location":"wiki/mkcad/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/motor/","title":"Motor","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/motor/#legal-frc-motors","title":"Legal FRC Motors","text":"<p>As of 2025, this is the list of all legal FRC motors. This was found in the 2025 Game Manual.</p> Motor Name Part Numbers Available AndyMark 9015 am-0912 AndyMark 9015 AndyMark NeveRest am-3104 AndyMark PG am-2161 (alt. PN am-2765) am-2194 (alt. PN am-2766) AndyMark RedLine Motor am-3775 am-3775a AndyMark Snow Blower Motor am-2235 am-2235a Banebots am-3830 M7-RS775-18 RS775WC-8514 M5 \u2013 RS550-12 RS550VC-7527 RS550 CIM FR801-001 M4-R0062-12 AM802-001A 217-2000 PM25R-44F-1005 PM25R-45F-1004 PM25R-45F-1003 PMR25R-45F-1003 PMR25R-44F-1005 am-0255 CTR Electronics Minion 24-777378 WCP-1691 CTR Electronics/VEX Robotics Falcon 500 217-6515 am-6515 19-708850 am-6515_Short Current/former KOP automotive motors Denso AE235100-0160 Denso 5-163800-RC1 Denso 262100-3030 Denso 262100-3040 Bosch 6 004 RA3 194-06 Johnson Electric JE-PLG-149 Johnson Electric Nidec Dynamo BLDC Motor am-3740 DM3012-1063 Playing with Fusion Venom BDC-10001 REV Robotics HD Hex REV-41-1291 REV Robotics NEO Brushless REV-21-1650 (v1.0 or v1.1) am-4258 am-4258a REV Robotics NEO 550 REV-21-1651 am-4259 REV Robotics NEO Vortex REV-21-1652 am-5275 VEX BAG 217-3351 VEX Mini-CIM 217-3371 West Coast Products Kraken x44 WCP-0941 West Coast Products Kraken x60 WCP-0940 am-5274 West Coast Products RS775 Pro 217-4347"},{"location":"wiki/motor/#motor-naming-conventions","title":"Motor Naming Conventions","text":"<p>The motor naming conventions are as follows...</p> <ol> <li>Start at the front center side of the robot move in a clockwise fashion, naming every motor that you come across (starting with 1). </li> <li>Once you have named all motors on the same level, move upwards on the robot, using the same clockwise motion and naming conventions. </li> </ol> <p>If the O's are drive motors, and the pluses are motors above the rest of the robot, the motor numbers would be as follows:</p>"},{"location":"wiki/motor/#tank-drive-example","title":"Tank Drive Example","text":"<pre><code>  [-------]\n [   +++   ]\n [O       O]\n [O     + O]\n [         ]\n  [-------]\n\nMotors would be named as follows:\n\n  [-------]\n [   856   ]\n [4       1]\n [3     7 2]\n [         ]\n  [-------]\n</code></pre> <p>The motor in the middle of the robot gets named first on that layer as you start in the front center of the robot, and move in the same clockwise fashion to name the rest.</p>"},{"location":"wiki/motor/#swerve-drive-example","title":"Swerve Drive Example","text":"<pre><code>  O-------O\n O         O\n [  +      ]\n [    +    ]\n O         O\n  O-------O\n\nMotors would be named as follows:\n\n  8-------1\n 7         2\n [ 10      ]\n [    9    ]\n 6         3\n  5-------4\n</code></pre>"},{"location":"wiki/motor/#sources-further-reading","title":"Sources &amp; Further Reading","text":"<ul> <li>https://frcdesign.org/learning-course/stage1/1B/motors/</li> <li>https://frcdesign.org/learning-course/stage1/1B/torque-speed/</li> <li>https://www.chiefdelphi.com/uploads/default/original/3X/d/2/d2495ff57e402e93bb479171750bb6b05ec8e594.pdf</li> </ul>"},{"location":"wiki/motor/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/mshsl/","title":"MSHSL","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>MSHSL stands for the Minnesota State High School League.</p>"},{"location":"wiki/mshsl/#varsity-letters","title":"Varsity Letters","text":"<p>MSHSL allows students in Minnesota to letter in robotics.</p>"},{"location":"wiki/mshsl/#state-level-tournament","title":"State-level tournament","text":"<p>MSHSL regularly hosts FRC events that take place after worlds.</p>"},{"location":"wiki/mshsl/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/navx/","title":"NavX","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The NavX is an FRC component made by Kauai Labs. It is a \"9-axis inertial/magnetic sensor and motion processor\".</p> <p></p>"},{"location":"wiki/navx/#sources","title":"Sources","text":"<ul> <li>https://pdocs.kauailabs.com/navx-mxp/</li> </ul>"},{"location":"wiki/navx/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/neo-11/","title":"Neo 1.1","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information. It could use an image.</p>"},{"location":"wiki/neo-11/#links","title":"Links","text":"<ul> <li>https://www.revrobotics.com/rev-21-1650/</li> </ul>"},{"location":"wiki/neo-11/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/neo-550/","title":"Neo 550","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information. It could use a photo of the motor.</p>"},{"location":"wiki/neo-550/#links","title":"Links","text":"<ul> <li>https://www.revrobotics.com/rev-21-1651/</li> </ul>"},{"location":"wiki/neo-550/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/neo-vortex/","title":"NEO Vortex","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information. It could use a photo of the motor.</p>"},{"location":"wiki/neo-vortex/#links","title":"Links","text":"<ul> <li>https://www.revrobotics.com/rev-21-1652/</li> </ul>"},{"location":"wiki/neo-vortex/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/onshape/","title":"Onshape","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Onshape is a CAD (Computer-aided design) tool used by our team, and many other FRC teams as well.</p>"},{"location":"wiki/onshape/#documents-in-onshape","title":"Documents in Onshape","text":"<p>An Onshape document is not a CAD file, but a container that holds data related to a project, including any number of part studios, assemblies, drawings, and other media/files. - https://frcdesign.org/learning-course/stage0/0C/document-navigation/</p>"},{"location":"wiki/onshape/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/opencv/","title":"OpenCV","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>OpenCV stands for Open Computer Vision Library.</p>"},{"location":"wiki/opencv/#further-reading","title":"Further Reading","text":"<ul> <li>OpenCV Documentation</li> </ul>"},{"location":"wiki/opencv/#sources","title":"Sources","text":"<ul> <li>https://opencv.org/</li> </ul>"},{"location":"wiki/opencv/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/part-studio/","title":"Part Studio","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A part studio is an environment where you can design and model one or more parts at a time and add robust relationships between them. You do this using a series of sketches and features. This helps build design intent between multiple parts easily without having to switch between different files. - https://frcdesign.org/learning-course/stage0/0C/document-navigation/#__tabbed_1_2</p>"},{"location":"wiki/part-studio/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/pathplanner/","title":"PathPlanner","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/pathplanner/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/pcm/","title":"PCM","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>PCM stands for Pneumatic Control Module. It contains all the inputs and outputs required to control pneumatic solanoids and a compressor.</p> <p>It is controlled by the RoboRIO over CAN.</p>"},{"location":"wiki/pcm/#pcm-troubleshooting","title":"PCM Troubleshooting","text":"<p>First, you'll want to see what info you can gather from the device itself. Using the following diagram, check the status LED and try to narrow down the problem. </p> LED Strobe Slow Long Green No fault, robot enabled Sticky fault N/A Orange N/A Sticky fault N/A Red N/A No CAN communication or solenoid fault Compressor Fault <p>Once you have done that (the fastest step), try to launch the diagnostic software Phoenix Tuner, assuming you haven't solved it yet.</p> <ul> <li>If you can connect over WiFi, great, that's the easiest way. If not, try to find yourself a USB-B to USB-A cable to connect directly to the RoboRio, and select RoboRio over USB from the Phoenix Tuner Diagnostic Server Address dropdown menu. </li> <li>select the PCM from the upper \"selected device\" dropdown, and go to the Self-Test tab.</li> <li>Press Self-Test at the bottom, and interpret the results. (This takes some common sense and reading comprehension.)</li> </ul>"},{"location":"wiki/pcm/#further-reading","title":"Further Reading","text":"<ul> <li>https://www.firstinspires.org/sites/default/files/uploads/resource_library/frc/technical-resources/frc_pneumatics_manual.pdf</li> </ul>"},{"location":"wiki/pcm/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/pdh/","title":"PDH","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Power distribution hub.</p> <p></p> <p>Image from REV Robotics: https://www.revrobotics.com/rev-11-1850/</p>"},{"location":"wiki/pdh/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/pdp/","title":"PDP","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>PDP stands for Power Distribution Panel. It is a product by CTR that competes with the PDH.</p> <p></p> <p>Image is from https://store.ctr-electronics.com/products/power-distribution-panel. It is of the PDP 1.0, which is no longer sold.</p>"},{"location":"wiki/pdp/#further-reading","title":"Further Reading","text":"<ul> <li>https://store.ctr-electronics.com/products/pdp-2</li> </ul>"},{"location":"wiki/pdp/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/phoenix-tuner/","title":"Phoenix Tuner","text":"<p>Phoenix Tuner is a pretty simple piece of software. It's mostly automatic.</p> <p>You'll need to install the CTRE Phoenix Framework to get Phoenix Tuner.</p>"},{"location":"wiki/phoenix-tuner/#initial-setup-robot","title":"Initial Setup (Robot)","text":"<ol> <li>Connect the laptop to the RoboRIO via a USB-A to USB-B cable. USB-A end goes in the laptop, USB-B in the RoboRIO.</li> <li>Launch Phoenix Tuner</li> <li>Read through the text at the top of the tab labeled \"Robot Controller Install.\"</li> <li>Follow its instructions, and wait until it's done.</li> <li>The diagnostic server is now installed, and Phoenix tuner can now be used.</li> <li>To start viewing CAN devices, it needs to know where to look; Put either the team number or the IP of the RoboRIO (usually 10.25.30.2) into the Diagnostic Server Address box on the Robot Controller Install tab. It will autoconnect and start displaying CAN devices, of which the list will continually update. No need to manually refresh.</li> </ol>"},{"location":"wiki/phoenix-tuner/#general-use","title":"General Use","text":"<ul> <li>The most common application of the software is for clearing sticky faults.</li> <li>Go to the CAN Devices tab </li> <li>Click the CAN device you want to test</li> <li>Switch to the Self-Test tab</li> <li>Press Self-Test at the bottom to get the diagnostic readout</li> <li> <p>Interpret the cause, then press Blink at the bottom to clear it</p> </li> <li> <p>Another use of Phoenix Tuner is updating the firmware of the PDP, PCM, and motor controllers. </p> </li> <li>Download the latest version of the firmware.</li> <li>On the Can Device page, the bottom has a section for upgrading the firmware.</li> <li>All you have to do is select the CAN device you wish to upgrade</li> <li>Select the firmware file using the [...] box</li> <li>On the file explorer sidebar, there should be a section with the Phoenix Tuner icon and name</li> <li>It contains some subfolders, which each contain different firmware files</li> <li>Find and select the firmware files for the device you are trying to update</li> <li>Press the Update Device button, or select \"Update all _ Devices\" to do all of them, one after another, all at once.</li> </ul>"},{"location":"wiki/phoenix-tuner/#problems-we-have-encountered-in-the-past","title":"Problems we have encountered in the past","text":"<ul> <li>Upon first connection of CAN wires, the motor controllers all got assigned the same ID of 0 on the CAN bus.</li> <li>The solution was simple, click the slot for the duplicates, and change the ID over and over again until each controller has its own ID</li> <li>Be cautious, however, as this changes which is which in the code, and could cause problems if, say, the back left motor was previously coded as ID 4, and now appears as ID 2 to the robot. </li> </ul>"},{"location":"wiki/phoenix-tuner/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/pose-estimation/","title":"Pose Estimation","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/pose-estimation/#further-reading","title":"Further Reading","text":"<ul> <li>https://en.wikipedia.org/wiki/3D_pose_estimation</li> </ul>"},{"location":"wiki/pose-estimation/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/python/","title":"Python","text":"<p>Python is a programming language.</p>"},{"location":"wiki/python/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/raspberry-pi/","title":"Raspberry Pi","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/raspberry-pi/#raspberry-pi-5","title":"Raspberry Pi 5","text":"<p>The PI5 is the latest version of the raspberry pi. It is a single-board computer that is quite handy for vision coprocessors.</p>"},{"location":"wiki/raspberry-pi/#raspberry-pi-4","title":"Raspberry Pi 4","text":""},{"location":"wiki/raspberry-pi/#raspberry-pi-3","title":"Raspberry Pi 3","text":""},{"location":"wiki/raspberry-pi/#raspberry-pi-pico","title":"Raspberry Pi Pico","text":""},{"location":"wiki/raspberry-pi/#raspberry-pi-zero","title":"Raspberry Pi Zero","text":""},{"location":"wiki/raspberry-pi/#further-reading","title":"Further Reading","text":"<ul> <li>https://www.raspberrypi.com/</li> </ul>"},{"location":"wiki/raspberry-pi/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/reefscape/","title":"Reefscape","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The 2024-25 FRC game. Our robot for this season is called The Shrieking Eel.</p>"},{"location":"wiki/reefscape/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/replicate/","title":"Replicate","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>An Onshape tool that lets you replicate mates in an assembly.</p>"},{"location":"wiki/replicate/#example","title":"Example","text":""},{"location":"wiki/replicate/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/rev/","title":"REV Robotics","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>REV Robotics is a company that \"designs, builds and manufactures robotics parts and components\".</p>"},{"location":"wiki/rev/#sources","title":"Sources","text":"<ul> <li>https://www.revrobotics.com</li> </ul>"},{"location":"wiki/rev/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/revlib/","title":"RevLib","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/revlib/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/riffs-of-insanity/","title":"Riffs of Insanity","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Our robot for the 2023-24 season, Crescendo.</p>"},{"location":"wiki/riffs-of-insanity/#sources","title":"Sources","text":"<ul> <li>Technical binder (link)</li> </ul>"},{"location":"wiki/riffs-of-insanity/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/roborio/","title":"RoboRIO","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The roborio is the main processing unit on a robot.</p> <p></p>"},{"location":"wiki/roborio/#updating-the-roborio","title":"Updating the RoboRIO","text":"<p>Here's the general overview:</p> <ol> <li>Follow the instructions on this page to install the FRC Game Tools, which includes the RoboRIO Imaging software. (If your computer already has FRC Driver Station, it has this software too.)</li> <li>Find your local friendly RoboRIO connector cable. </li> <li>Connect the USB end to your computer.</li> <li>Connect the other end to the appropriate port on the RoboRIO.</li> <li>Right-click on the software and select \"Run as Administrator\" (not always needed, but could solve problems.)</li> <li> <p>After launching, the roboRIO Imaging Tool will scan for available roboRIOs and indicate any found in the top left box. The bottom left box will show information and settings for the roboRIO currently selected. The right hand pane contains controls for modifying the roboRIO settings:</p> </li> <li> <p>Edit Startup Settings - This option is used when you want to configure the startup settings of the roboRIO (the settings in the right pane), without imaging the roboRIO.</p> </li> <li>Format Target - This option is used when you want to load a new image on the roboRIO (or reflash the existing image). This is the most common option.</li> <li> <p>Update Firmware - This option is used to update the roboRIO firmware.</p> </li> <li> <p>Have patience. (This could be the hardest step)</p> </li> </ol> <p>You can also follow the instructions provided on the WPILib documentation.</p>"},{"location":"wiki/roborio/#sources","title":"Sources","text":"<ul> <li>Image is from https://www.andymark.com/products/ni-roborio-2</li> </ul>"},{"location":"wiki/roborio/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/robot-code/","title":"Robot Code","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Robot code is code that controls a robot. We write FRC robot code in Java, using the WPILib library and VSCode for an IDE.</p>","tags":["Programming"]},{"location":"wiki/robot-code/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/robot-radio/","title":"Robot Radio","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The robot radio is the part of a robot that allows it to communicate wirelessly with the Field Management System and/or your laptop.</p> <p>There have been several versions of the robot radio over the years, but the most recent one is the VH-109.</p>"},{"location":"wiki/robot-radio/#further-reading","title":"Further Reading","text":"<ul> <li>https://store.ctr-electronics.com/products/frc-radio</li> </ul>"},{"location":"wiki/robot-radio/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/rps/","title":"RPS","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>RPS stands for Rochester Public Schools.</p>"},{"location":"wiki/rps/#links","title":"Links","text":"<ul> <li>Main website</li> </ul>"},{"location":"wiki/rps/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/section-view/","title":"Section View","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Section view is a tool in Onshape that allows you to temporarily cut parts to be able to see their insides.</p>"},{"location":"wiki/section-view/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/shaft/","title":"Shaft","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A shaft is basically just a stick, usually made of metal. It is used to \"transmit rotational power along an axis\" (FRCDesign).</p>"},{"location":"wiki/shaft/#sources","title":"Sources","text":"<ul> <li>https://frcdesign.org/learning-course/stage1/1B/shafts-bearings/</li> </ul>"},{"location":"wiki/shaft/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/shooter/","title":"Shooter","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/shooter/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/sketch/","title":"Sketch","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A sketch is the core building block in Onshape.</p>"},{"location":"wiki/sketch/#how-sketches-work","title":"How sketches work","text":"<p>This guide explains sketches well.</p>"},{"location":"wiki/sketch/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/spacer/","title":"Spacer","text":"<p>Usually, a spacer is a cylinder that connects two plates together.</p>"},{"location":"wiki/spacer/#featurescript","title":"Featurescript","text":"<p>There is an Onshape featurescript for generating spacers.</p> <p></p>"},{"location":"wiki/spacer/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/spark-max/","title":"SparkMAX","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/spark-max/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/swerve-drive-specialties/","title":"Swerve Drive Specialties","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>https://www.swervedrivespecialties.com/</p>"},{"location":"wiki/swerve-drive-specialties/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/swerve-drive/","title":"Swerve Drive","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A type of drive train used in FRC.</p>"},{"location":"wiki/swerve-drive/#further-reading","title":"Further Reading","text":"<ul> <li>https://compendium.readthedocs.io/en/latest/tasks/drivetrains/swerve.html</li> <li>https://abhinavwastaken.medium.com/using-inverse-kinematics-to-become-a-master-swerver-1026759d81b0 (alternative frontend version)</li> <li>https://www.freshconsulting.com/insights/blog/how-to-build-a-swerve-drive-robot/</li> <li>https://docs.yagsl.com/fundamentals/swerve-drive</li> </ul>"},{"location":"wiki/swerve-drive/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/team-calendar/","title":"Team Calendar","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The team calendar is a Google Calendar managed by the team coaches. </p> <p>You can find it on the team website.</p>"},{"location":"wiki/team-calendar/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/team-website/","title":"Team Website","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>The team website is available at https://frcteam2530.org.</p>"},{"location":"wiki/team-website/#further-reading","title":"Further Reading","text":"<ul> <li>Website source code (A private repo, requires an authorized GitHub account): https://github.com/Team2530/frc2530website</li> </ul>"},{"location":"wiki/team-website/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/the-shrieking-eel/","title":"The Shrieking Eel","text":"<p>The Shrieking Eel was our robot for the 2024-25 season Reefscape.</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#design","title":"Design","text":""},{"location":"wiki/the-shrieking-eel/#frame-and-drivetrain","title":"Frame and Drivetrain","text":"<p>The Eel is a Swerve Drive robot. We use Mk4i modules with an L2 gearing in order to accelerate quickly for short cycle times. The drive motors are Kraken x60s, and the steering motors are NEO 1.1s. We 3D-printed wheel well guards to protect the drive train from dirt and debris. The wheels are Black Neoprene Billet wheels from Swerve Drive Specialties, with an outside diameter (OD) of 4\" and a width of 1.5\". We use CANCoders to measure the absolute rotation of the wheels.</p> <p></p> <p></p> <p>The frame perimeter is 29.5\"x29.5\". The baseplate is made of 3mm polycarbonate instead of HDPE for weight reasons, inspectability and frame rigidity. It is dropped by 0.75\" with a aluminum blocks between the swerve module plate and the frame. Lowering the baseplate prevents bumps on the field and also reduces the risk of high-centering<sup>1</sup> on algae gamepieces. The rails on the frame are made of 80/20 #1020, with aluminum blocks to lower the CG. Eye bolts were added in the drop blocks to add carrying straps.</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#bumpers","title":"Bumpers","text":"<p>This year's game manual introduced changes to bumper requirements, and we went through a lengthy design process to make them more sophisticated than ever.</p> <p>Each set of bumpers (4 pieces in total, 2 red and 2 blue) takes the form of two U-shaped halves that form a rectangle.</p> <p>Not finished</p> <p>This section is a work in progress. An exploded view would be very nice, and it has been said that the backer components might not be made out of oak plywood anymore due to weight reduction.</p> <p>Backer components are made of oak plywood, and have a height of 5in and a thickness of 0.7 inches.</p> <p>The foam has two layers instead of three for shock reduction and simplicity. The inner layer is made of 2\u201d Polyethylene (PE) Foam 1.7#/cuft from Foam Factory, . The outer layer is made of 1\" EVA Floor tiles (self measured density 4.3#/cuft:  Prosource Extra Thick EVA Foam Interlocking Tiles (Amazon)). <p>The red/blue cloth covers on the bumpers are made of Seattle Fabrics' 1000D Cordura Nylon. The numbers \"2530\" were printed as vinyl stickers. Comic sans was chosen as a font after a short survey.</p> <p>These components were used for the brackets and mounts:  </p> <ul> <li>Corner Brackets: 2\" Aluminum L channel 2\" bracket</li> <li>Plummer Industries Vertical Mounts for frame attachment</li> <li>Through bolt X 2 through the 80/20 frame on each long side of U bumper for stabilization</li> </ul>"},{"location":"wiki/the-shrieking-eel/#elevator","title":"Elevator","text":"<p>Our robot has a 2-stage cascade elevator with an arm/wrist mechanism on the top. The elevator is made of 1/16\u201d thick 2x1 box tubes. It uses a Billet Elevator Bearing Block by SDS for the bearing, and the rigging is #25 roller chain for the first stage and Dyneema rope from Thriftybot for the second. The elevator is driven by Kraken motors, and there are constant force springs that cancel some of the weight to allow it to accelerate quickly.</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#arm","title":"Arm","text":"<p>The arm is attached by a joint to the second stage of the elevator. A NEO Vortex controls that joint, with a MAXPlanetary Gearbox and some other gears with an overall reduction of 96:1.</p> <p></p> <p>The arm itself is made of 2x2 MAXTube from REV.</p>"},{"location":"wiki/the-shrieking-eel/#wrist","title":"Wrist","text":"<p>At the end of the arm, there is a wrist with 2 DOF (pitch and roll). It is powered by two Neo 550s. One of the motors is located further back on the arm and controls the roll of the wrist, and the other is on the wrist and controls the pitch.</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#coral-manipulator","title":"Coral Manipulator","text":"<p>The coral manipulator is mounted to the end of the wrist. It is shaped like a dust pan and uses two sets of compliant wheels powered by a Falcon 500. The wheels grip the inside of a coral gamepiece against the dustpan to intake it, and can be reversed to release the coral over the reef.</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#climber","title":"Climber","text":"<p>The Shrieking Eel has a two-bar climber design. It uses the bars to rotate the cage and then latches around the cage. One bar is powered by a NEO Vortex, and the other is not controlled.</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#algae-manipulator","title":"Algae Manipulator","text":"<p>The Eel has an algae manipulator attached to the elevator. It is made out of two plates of MAXComposite, and folds out on a rotation sprocket. There are two compliant wheels that roll algae in/out of the manipulator. It is powered by two NEO 550s, one of which is used to control the algae manipulator arm and the other spins the wheels.</p> <p>The algae manipulator can intake from the reef and the lollipops (ice cream cones? The algae game pieces stacked on coral at the start of the game). It can score algae in the processor and in the barge.</p>"},{"location":"wiki/the-shrieking-eel/#robot-aesthetics","title":"Robot Aesthetics","text":"<p>The Shrieking Eel has a number of aesthetic elements. </p> <p>TODO: Add more information</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#electronics-cover","title":"Electronics Cover","text":""},{"location":"wiki/the-shrieking-eel/#sponsor-boards","title":"Sponsor Boards","text":"<p>There are two sponsor boards on the robot.</p> <p></p>"},{"location":"wiki/the-shrieking-eel/#eel-stickers","title":"Eel Stickers","text":""},{"location":"wiki/the-shrieking-eel/#electronics","title":"Electronics","text":"<p>We don't have electronics documentation</p> <p>If you see this, please talk to Luke. He says there was a sheet of paper in the shop with our electrical layout, but it has been lost.</p> <p>Any information at all on our electrical design would be appreciated. Please add it if you know something.</p>"},{"location":"wiki/the-shrieking-eel/#vision-system","title":"Vision System","text":"<p>The Shrieking Eel has an impressive vision system this year. It features three Limelight 4's for reading apriltags on the field and doing pose-estimation, a time-of-flight depth camera for precise aiming when scoring coral, and a 360 camera for recording every angle of matches.</p> <p>That other camera</p> <p>There is another camera on the robot, but it isn't technically used for the vision system. should it be added here or not?</p>"},{"location":"wiki/the-shrieking-eel/#limelights","title":"Limelights","text":"<p>TODO: Add more details</p> <p>There are three limelight 4's on the robot.</p>"},{"location":"wiki/the-shrieking-eel/#coverage","title":"Coverage","text":"<p>Note that the frustums shown in the image extend much further than the image suggests.</p> <p>Link to cropping method: https://github.com/Team2530/RobotCode2025/blob/1598b280134871187481bdb6dd90db7fc00f7f44/src/main/java/frc/robot/subsystems/Limelight.java#L71</p>"},{"location":"wiki/the-shrieking-eel/#depth-camera","title":"Depth Camera","text":"<p>TODO: Depth camera information</p> <p></p> <p>The time of flight camera was featured in a facebook post by FIRST Updates Now:</p> <p>TODO: Show a video that more accurately depicts the depth camera</p> <p>The First updates now clip doesn't actually show the depth camera aim correction in action (although they did record it), so we should add something to demonstrate it.</p>"},{"location":"wiki/the-shrieking-eel/#360-camera","title":"360 Camera","text":"<p>This is the first year that our team has built a robot with a 360 camera on it. The Shrieking Eel has a Insta360 mounted at the base of the arm.</p> <p>More videos will be added soon</p> <p>We recorded a lot of matches with the Insta360 and they will be here soon.</p>"},{"location":"wiki/the-shrieking-eel/#links","title":"Links","text":"<ul> <li>Onshape CAD Model</li> <li>2025 Technical Manual</li> </ul>"},{"location":"wiki/the-shrieking-eel/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p> <ol> <li> <p>High-centering means to \"become stranded with all wheels off the ground\" according to Wiktionary.\u00a0\u21a9</p> </li> </ol>"},{"location":"wiki/thriftybot/","title":"Thriftybot","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A distributer of robotics parts.</p>"},{"location":"wiki/thriftybot/#links","title":"Links","text":"<ul> <li>https://www.thethriftybot.com/</li> </ul>"},{"location":"wiki/thriftybot/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/turbo-scout/","title":"Turbo Scout","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Turbo scout is a scouting application that our team uses.</p>"},{"location":"wiki/turbo-scout/#further-reading","title":"Further Reading","text":"<ul> <li>Live instance: https://turbo-scout.com</li> <li>Source code (with README): https://github.com/Team2530/turbo-scout</li> </ul>"},{"location":"wiki/turbo-scout/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/usb/","title":"USB","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>Universal Serial Bus.</p>"},{"location":"wiki/usb/#further-reading","title":"Further Reading","text":"<ul> <li>https://en.wikipedia.org/wiki/USB</li> <li>https://www.usb.org/</li> </ul>"},{"location":"wiki/usb/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/variable-studio/","title":"Variable Studio","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>A variable studio is a special type of tab in Onshape that allows for the creation of variables. These variables are very useful and enable the creation of part studios and assemblies that can be quickly changed to fit new parameters.</p> <p></p>"},{"location":"wiki/variable-studio/#creating-a-variable-studio","title":"Creating a Variable Studio","text":"<p>To create a variable studio, click on the Plus icon and then select \"Variable Studio\".</p> <p></p>"},{"location":"wiki/variable-studio/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/visual-studio/","title":"Visual Studio","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>This is not the IDE you are looking for</p> <p>We use VSCode to develop robot code. This page is about a similar product made by the same company with a very similar name.</p> <p>Visual Studio is an IDE developed by Microsoft. Its primary purpose is working with .NET and C++.</p>","tags":["Programming"]},{"location":"wiki/visual-studio/#links","title":"Links","text":"<ul> <li>Visual Studio Homepage</li> </ul>","tags":["Programming"]},{"location":"wiki/visual-studio/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]},{"location":"wiki/vrm/","title":"VRM","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>VRM stands for Voltage Regulator Module. It provides regulated power to the Radio and other things from the Battery.</p>"},{"location":"wiki/vrm/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/vscode/","title":"VSCode","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>VSCode (Visual Studio Code, not to be confused with Visual Studio) is an IDE created by Microsoft.</p>","tags":["Programming"]},{"location":"wiki/vscode/#links","title":"Links","text":"<ul> <li>Official VSCode Website</li> <li>VSCodium<sup>1</sup></li> </ul>","tags":["Programming"]},{"location":"wiki/vscode/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p> <ol> <li> <p>Open source binaries of VSCode with telemetry disabled and bloat removed.\u00a0\u21a9</p> </li> </ol>","tags":["Programming"]},{"location":"wiki/vscodium/","title":"VSCodium","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>An open-source version of VSCode.</p>"},{"location":"wiki/vscodium/#source","title":"Source","text":"<ul> <li>https://vscodium.com/</li> </ul>"},{"location":"wiki/vscodium/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/west-coast-products/","title":"West Coast Products","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p>"},{"location":"wiki/west-coast-products/#further-reading","title":"Further Reading","text":"<ul> <li>https://wcproducts.com/</li> </ul>"},{"location":"wiki/west-coast-products/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>"},{"location":"wiki/wpilib/","title":"WPILib","text":"<p>This page is not finished!</p> <p>If you are a team member and know more about this topic than what is currently here please contribute that information.</p> <p>WPILib is a software library for FRC robot code development. It supports Java, C++ and Python.</p>","tags":["Programming"]},{"location":"wiki/wpilib/#links","title":"Links","text":"<ul> <li>Website</li> <li>GitHub page</li> <li>WPI FRCDocs \"What is WPILib\"</li> <li>Primary GitHub repository</li> <li>Installation Guide and Download page</li> </ul>","tags":["Programming"]},{"location":"wiki/wpilib/#backlinks","title":"Backlinks","text":"<p>BACKLINK_PLUGIN_355460_PLACEHOLDER</p>","tags":["Programming"]}]}